
FreeRTOS_VIA2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  000029d0  00002a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c4e  00800210  00800210  00002a74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00002ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a7f  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b6  00000000  00000000  00005903  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b24  00000000  00000000  000062b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d90  00000000  00000000  00008de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001401  00000000  00000000  00009b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c79  00000000  00000000  0000af71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  0000cbea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	83 c0       	rjmp	.+262    	; 0x108 <__ctors_end>
       2:	00 00       	nop
       4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>
       6:	00 00       	nop
       8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
       a:	00 00       	nop
       c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
       e:	00 00       	nop
      10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
      12:	00 00       	nop
      14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
      16:	00 00       	nop
      18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
      1e:	00 00       	nop
      20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_9>
      28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8e c0       	rjmp	.+284    	; 0x14a <__bad_interrupt>
      2e:	00 00       	nop
      30:	8c c0       	rjmp	.+280    	; 0x14a <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
      36:	00 00       	nop
      38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
      3e:	00 00       	nop
      40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
      42:	00 00       	nop
      44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
      46:	00 00       	nop
      48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
      4e:	00 00       	nop
      50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
      52:	00 00       	nop
      54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
      56:	00 00       	nop
      58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	76 c0       	rjmp	.+236    	; 0x14a <__bad_interrupt>
      5e:	00 00       	nop
      60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__vector_25>
      68:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__vector_26>
      6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
      6e:	00 00       	nop
      70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
      72:	00 00       	nop
      74:	6a c0       	rjmp	.+212    	; 0x14a <__bad_interrupt>
      76:	00 00       	nop
      78:	68 c0       	rjmp	.+208    	; 0x14a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	66 c0       	rjmp	.+204    	; 0x14a <__bad_interrupt>
      7e:	00 00       	nop
      80:	b8 c6       	rjmp	.+3440   	; 0xdf2 <__vector_32>
      82:	00 00       	nop
      84:	62 c0       	rjmp	.+196    	; 0x14a <__bad_interrupt>
      86:	00 00       	nop
      88:	60 c0       	rjmp	.+192    	; 0x14a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5e c0       	rjmp	.+188    	; 0x14a <__bad_interrupt>
      8e:	00 00       	nop
      90:	5c c0       	rjmp	.+184    	; 0x14a <__bad_interrupt>
      92:	00 00       	nop
      94:	5a c0       	rjmp	.+180    	; 0x14a <__bad_interrupt>
      96:	00 00       	nop
      98:	58 c0       	rjmp	.+176    	; 0x14a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	56 c0       	rjmp	.+172    	; 0x14a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	54 c0       	rjmp	.+168    	; 0x14a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	52 c0       	rjmp	.+164    	; 0x14a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	50 c0       	rjmp	.+160    	; 0x14a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4e c0       	rjmp	.+156    	; 0x14a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4c c0       	rjmp	.+152    	; 0x14a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4a c0       	rjmp	.+148    	; 0x14a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	48 c0       	rjmp	.+144    	; 0x14a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	46 c0       	rjmp	.+140    	; 0x14a <__bad_interrupt>
      be:	00 00       	nop
      c0:	44 c0       	rjmp	.+136    	; 0x14a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	42 c0       	rjmp	.+132    	; 0x14a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	40 c0       	rjmp	.+128    	; 0x14a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3e c0       	rjmp	.+124    	; 0x14a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3c c0       	rjmp	.+120    	; 0x14a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3a c0       	rjmp	.+116    	; 0x14a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	38 c0       	rjmp	.+112    	; 0x14a <__bad_interrupt>
      da:	00 00       	nop
      dc:	36 c0       	rjmp	.+108    	; 0x14a <__bad_interrupt>
      de:	00 00       	nop
      e0:	34 c0       	rjmp	.+104    	; 0x14a <__bad_interrupt>
	...

000000e4 <prvIdleTask>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	1f 92       	push	r1
      ea:	1f 92       	push	r1
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	9a 83       	std	Y+2, r25	; 0x02
      f2:	89 83       	std	Y+1, r24	; 0x01
      f4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <prvCheckTasksWaitingTermination>
      f8:	80 91 fa 0d 	lds	r24, 0x0DFA
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	08 f0       	brcs	.+2      	; 0x102 <prvIdleTask+0x1e>
     100:	03 d5       	rcall	.+2566   	; 0xb08 <vPortYield>
     102:	0e 94 c9 13 	call	0x2792	; 0x2792 <vApplicationIdleHook>
     106:	f6 cf       	rjmp	.-20     	; 0xf4 <prvIdleTask+0x10>

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d1 e2       	ldi	r29, 0x21	; 33
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	0c bf       	out	0x3c, r16	; 60

00000118 <__do_copy_data>:
     118:	12 e0       	ldi	r17, 0x02	; 2
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b2 e0       	ldi	r27, 0x02	; 2
     11e:	e0 ed       	ldi	r30, 0xD0	; 208
     120:	f9 e2       	ldi	r31, 0x29	; 41
     122:	00 e0       	ldi	r16, 0x00	; 0
     124:	0b bf       	out	0x3b, r16	; 59
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x14>
     128:	07 90       	elpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a0 31       	cpi	r26, 0x10	; 16
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x10>

00000132 <__do_clear_bss>:
     132:	2e e0       	ldi	r18, 0x0E	; 14
     134:	a0 e1       	ldi	r26, 0x10	; 16
     136:	b2 e0       	ldi	r27, 0x02	; 2
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	ae 35       	cpi	r26, 0x5E	; 94
     13e:	b2 07       	cpc	r27, r18
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 51 13 	call	0x26a2	; 0x26a2 <main>
     146:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__vector_default>

0000014e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	1f 92       	push	r1
     154:	1f 92       	push	r1
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	9c 01       	movw	r18, r24
     164:	2d 5f       	subi	r18, 0xFD	; 253
     166:	3f 4f       	sbci	r19, 0xFF	; 255
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	fc 01       	movw	r30, r24
     16e:	32 83       	std	Z+2, r19	; 0x02
     170:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	9a 81       	ldd	r25, Y+2	; 0x02
     176:	2f ef       	ldi	r18, 0xFF	; 255
     178:	3f ef       	ldi	r19, 0xFF	; 255
     17a:	fc 01       	movw	r30, r24
     17c:	34 83       	std	Z+4, r19	; 0x04
     17e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	9a 81       	ldd	r25, Y+2	; 0x02
     184:	9c 01       	movw	r18, r24
     186:	2d 5f       	subi	r18, 0xFD	; 253
     188:	3f 4f       	sbci	r19, 0xFF	; 255
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	fc 01       	movw	r30, r24
     190:	36 83       	std	Z+6, r19	; 0x06
     192:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	9c 01       	movw	r18, r24
     19a:	2d 5f       	subi	r18, 0xFD	; 253
     19c:	3f 4f       	sbci	r19, 0xFF	; 255
     19e:	89 81       	ldd	r24, Y+1	; 0x01
     1a0:	9a 81       	ldd	r25, Y+2	; 0x02
     1a2:	fc 01       	movw	r30, r24
     1a4:	30 87       	std	Z+8, r19	; 0x08
     1a6:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	9a 81       	ldd	r25, Y+2	; 0x02
     1ac:	fc 01       	movw	r30, r24
     1ae:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	1f 92       	push	r1
     1c0:	1f 92       	push	r1
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	fc 01       	movw	r30, r24
     1d0:	11 86       	std	Z+9, r1	; 0x09
     1d2:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	08 95       	ret

000001de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	00 d0       	rcall	.+0      	; 0x1e4 <vListInsertEnd+0x6>
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <vListInsertEnd+0x8>
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	9c 83       	std	Y+4, r25	; 0x04
     1ec:	8b 83       	std	Y+3, r24	; 0x03
     1ee:	7e 83       	std	Y+6, r23	; 0x06
     1f0:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	9c 81       	ldd	r25, Y+4	; 0x04
     1f6:	fc 01       	movw	r30, r24
     1f8:	81 81       	ldd	r24, Z+1	; 0x01
     1fa:	92 81       	ldd	r25, Z+2	; 0x02
     1fc:	9a 83       	std	Y+2, r25	; 0x02
     1fe:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     200:	8d 81       	ldd	r24, Y+5	; 0x05
     202:	9e 81       	ldd	r25, Y+6	; 0x06
     204:	29 81       	ldd	r18, Y+1	; 0x01
     206:	3a 81       	ldd	r19, Y+2	; 0x02
     208:	fc 01       	movw	r30, r24
     20a:	33 83       	std	Z+3, r19	; 0x03
     20c:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	9a 81       	ldd	r25, Y+2	; 0x02
     212:	fc 01       	movw	r30, r24
     214:	24 81       	ldd	r18, Z+4	; 0x04
     216:	35 81       	ldd	r19, Z+5	; 0x05
     218:	8d 81       	ldd	r24, Y+5	; 0x05
     21a:	9e 81       	ldd	r25, Y+6	; 0x06
     21c:	fc 01       	movw	r30, r24
     21e:	35 83       	std	Z+5, r19	; 0x05
     220:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	fc 01       	movw	r30, r24
     228:	84 81       	ldd	r24, Z+4	; 0x04
     22a:	95 81       	ldd	r25, Z+5	; 0x05
     22c:	2d 81       	ldd	r18, Y+5	; 0x05
     22e:	3e 81       	ldd	r19, Y+6	; 0x06
     230:	fc 01       	movw	r30, r24
     232:	33 83       	std	Z+3, r19	; 0x03
     234:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	9a 81       	ldd	r25, Y+2	; 0x02
     23a:	2d 81       	ldd	r18, Y+5	; 0x05
     23c:	3e 81       	ldd	r19, Y+6	; 0x06
     23e:	fc 01       	movw	r30, r24
     240:	35 83       	std	Z+5, r19	; 0x05
     242:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     244:	8d 81       	ldd	r24, Y+5	; 0x05
     246:	9e 81       	ldd	r25, Y+6	; 0x06
     248:	2b 81       	ldd	r18, Y+3	; 0x03
     24a:	3c 81       	ldd	r19, Y+4	; 0x04
     24c:	fc 01       	movw	r30, r24
     24e:	31 87       	std	Z+9, r19	; 0x09
     250:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     252:	8b 81       	ldd	r24, Y+3	; 0x03
     254:	9c 81       	ldd	r25, Y+4	; 0x04
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	21 e0       	ldi	r18, 0x01	; 1
     25c:	28 0f       	add	r18, r24
     25e:	8b 81       	ldd	r24, Y+3	; 0x03
     260:	9c 81       	ldd	r25, Y+4	; 0x04
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
}
     266:	26 96       	adiw	r28, 0x06	; 6
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	28 97       	sbiw	r28, 0x08	; 8
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	9e 83       	std	Y+6, r25	; 0x06
     28e:	8d 83       	std	Y+5, r24	; 0x05
     290:	78 87       	std	Y+8, r23	; 0x08
     292:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     294:	8f 81       	ldd	r24, Y+7	; 0x07
     296:	98 85       	ldd	r25, Y+8	; 0x08
     298:	fc 01       	movw	r30, r24
     29a:	80 81       	ld	r24, Z
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	9c 83       	std	Y+4, r25	; 0x04
     2a0:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     2a2:	8b 81       	ldd	r24, Y+3	; 0x03
     2a4:	9c 81       	ldd	r25, Y+4	; 0x04
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	41 f4       	brne	.+16     	; 0x2ba <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     2aa:	8d 81       	ldd	r24, Y+5	; 0x05
     2ac:	9e 81       	ldd	r25, Y+6	; 0x06
     2ae:	fc 01       	movw	r30, r24
     2b0:	87 81       	ldd	r24, Z+7	; 0x07
     2b2:	90 85       	ldd	r25, Z+8	; 0x08
     2b4:	9a 83       	std	Y+2, r25	; 0x02
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	1a c0       	rjmp	.+52     	; 0x2ee <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     2ba:	8d 81       	ldd	r24, Y+5	; 0x05
     2bc:	9e 81       	ldd	r25, Y+6	; 0x06
     2be:	03 96       	adiw	r24, 0x03	; 3
     2c0:	9a 83       	std	Y+2, r25	; 0x02
     2c2:	89 83       	std	Y+1, r24	; 0x01
     2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <vListInsert+0x5c>
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	fc 01       	movw	r30, r24
     2cc:	82 81       	ldd	r24, Z+2	; 0x02
     2ce:	93 81       	ldd	r25, Z+3	; 0x03
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9a 81       	ldd	r25, Y+2	; 0x02
     2d8:	fc 01       	movw	r30, r24
     2da:	82 81       	ldd	r24, Z+2	; 0x02
     2dc:	93 81       	ldd	r25, Z+3	; 0x03
     2de:	fc 01       	movw	r30, r24
     2e0:	20 81       	ld	r18, Z
     2e2:	31 81       	ldd	r19, Z+1	; 0x01
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	9c 81       	ldd	r25, Y+4	; 0x04
     2e8:	82 17       	cp	r24, r18
     2ea:	93 07       	cpc	r25, r19
     2ec:	60 f7       	brcc	.-40     	; 0x2c6 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	fc 01       	movw	r30, r24
     2f4:	22 81       	ldd	r18, Z+2	; 0x02
     2f6:	33 81       	ldd	r19, Z+3	; 0x03
     2f8:	8f 81       	ldd	r24, Y+7	; 0x07
     2fa:	98 85       	ldd	r25, Y+8	; 0x08
     2fc:	fc 01       	movw	r30, r24
     2fe:	33 83       	std	Z+3, r19	; 0x03
     300:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     302:	8f 81       	ldd	r24, Y+7	; 0x07
     304:	98 85       	ldd	r25, Y+8	; 0x08
     306:	fc 01       	movw	r30, r24
     308:	82 81       	ldd	r24, Z+2	; 0x02
     30a:	93 81       	ldd	r25, Z+3	; 0x03
     30c:	2f 81       	ldd	r18, Y+7	; 0x07
     30e:	38 85       	ldd	r19, Y+8	; 0x08
     310:	fc 01       	movw	r30, r24
     312:	35 83       	std	Z+5, r19	; 0x05
     314:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     316:	8f 81       	ldd	r24, Y+7	; 0x07
     318:	98 85       	ldd	r25, Y+8	; 0x08
     31a:	29 81       	ldd	r18, Y+1	; 0x01
     31c:	3a 81       	ldd	r19, Y+2	; 0x02
     31e:	fc 01       	movw	r30, r24
     320:	35 83       	std	Z+5, r19	; 0x05
     322:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9a 81       	ldd	r25, Y+2	; 0x02
     328:	2f 81       	ldd	r18, Y+7	; 0x07
     32a:	38 85       	ldd	r19, Y+8	; 0x08
     32c:	fc 01       	movw	r30, r24
     32e:	33 83       	std	Z+3, r19	; 0x03
     330:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     332:	8f 81       	ldd	r24, Y+7	; 0x07
     334:	98 85       	ldd	r25, Y+8	; 0x08
     336:	2d 81       	ldd	r18, Y+5	; 0x05
     338:	3e 81       	ldd	r19, Y+6	; 0x06
     33a:	fc 01       	movw	r30, r24
     33c:	31 87       	std	Z+9, r19	; 0x09
     33e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     340:	8d 81       	ldd	r24, Y+5	; 0x05
     342:	9e 81       	ldd	r25, Y+6	; 0x06
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	28 0f       	add	r18, r24
     34c:	8d 81       	ldd	r24, Y+5	; 0x05
     34e:	9e 81       	ldd	r25, Y+6	; 0x06
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
}
     354:	28 96       	adiw	r28, 0x08	; 8
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	08 95       	ret

00000366 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	00 d0       	rcall	.+0      	; 0x36c <uxListRemove+0x6>
     36c:	1f 92       	push	r1
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	9c 83       	std	Y+4, r25	; 0x04
     374:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     376:	8b 81       	ldd	r24, Y+3	; 0x03
     378:	9c 81       	ldd	r25, Y+4	; 0x04
     37a:	fc 01       	movw	r30, r24
     37c:	80 85       	ldd	r24, Z+8	; 0x08
     37e:	91 85       	ldd	r25, Z+9	; 0x09
     380:	9a 83       	std	Y+2, r25	; 0x02
     382:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	9c 81       	ldd	r25, Y+4	; 0x04
     388:	fc 01       	movw	r30, r24
     38a:	82 81       	ldd	r24, Z+2	; 0x02
     38c:	93 81       	ldd	r25, Z+3	; 0x03
     38e:	2b 81       	ldd	r18, Y+3	; 0x03
     390:	3c 81       	ldd	r19, Y+4	; 0x04
     392:	f9 01       	movw	r30, r18
     394:	24 81       	ldd	r18, Z+4	; 0x04
     396:	35 81       	ldd	r19, Z+5	; 0x05
     398:	fc 01       	movw	r30, r24
     39a:	35 83       	std	Z+5, r19	; 0x05
     39c:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	fc 01       	movw	r30, r24
     3a4:	84 81       	ldd	r24, Z+4	; 0x04
     3a6:	95 81       	ldd	r25, Z+5	; 0x05
     3a8:	2b 81       	ldd	r18, Y+3	; 0x03
     3aa:	3c 81       	ldd	r19, Y+4	; 0x04
     3ac:	f9 01       	movw	r30, r18
     3ae:	22 81       	ldd	r18, Z+2	; 0x02
     3b0:	33 81       	ldd	r19, Z+3	; 0x03
     3b2:	fc 01       	movw	r30, r24
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     3b8:	89 81       	ldd	r24, Y+1	; 0x01
     3ba:	9a 81       	ldd	r25, Y+2	; 0x02
     3bc:	fc 01       	movw	r30, r24
     3be:	21 81       	ldd	r18, Z+1	; 0x01
     3c0:	32 81       	ldd	r19, Z+2	; 0x02
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	28 17       	cp	r18, r24
     3c8:	39 07       	cpc	r19, r25
     3ca:	51 f4       	brne	.+20     	; 0x3e0 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	fc 01       	movw	r30, r24
     3d2:	24 81       	ldd	r18, Z+4	; 0x04
     3d4:	35 81       	ldd	r19, Z+5	; 0x05
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
     3d8:	9a 81       	ldd	r25, Y+2	; 0x02
     3da:	fc 01       	movw	r30, r24
     3dc:	32 83       	std	Z+2, r19	; 0x02
     3de:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	9c 81       	ldd	r25, Y+4	; 0x04
     3e4:	fc 01       	movw	r30, r24
     3e6:	11 86       	std	Z+9, r1	; 0x09
     3e8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     3ea:	89 81       	ldd	r24, Y+1	; 0x01
     3ec:	9a 81       	ldd	r25, Y+2	; 0x02
     3ee:	fc 01       	movw	r30, r24
     3f0:	80 81       	ld	r24, Z
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	28 0f       	add	r18, r24
     3f6:	89 81       	ldd	r24, Y+1	; 0x01
     3f8:	9a 81       	ldd	r25, Y+2	; 0x02
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	fc 01       	movw	r30, r24
     404:	80 81       	ld	r24, Z
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <prvCheckPendingReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     420:	39 c0       	rjmp	.+114    	; 0x494 <prvCheckPendingReadyList+0x80>
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     422:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
     424:	80 91 2b 02 	lds	r24, 0x022B
     428:	90 91 2c 02 	lds	r25, 0x022C
     42c:	fc 01       	movw	r30, r24
     42e:	86 81       	ldd	r24, Z+6	; 0x06
     430:	97 81       	ldd	r25, Z+7	; 0x07
     432:	9a 83       	std	Y+2, r25	; 0x02
     434:	89 83       	std	Y+1, r24	; 0x01
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	9a 81       	ldd	r25, Y+2	; 0x02
     43a:	0c 96       	adiw	r24, 0x0c	; 12
     43c:	94 df       	rcall	.-216    	; 0x366 <uxListRemove>
		}
		portENABLE_INTERRUPTS();
     43e:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     440:	89 81       	ldd	r24, Y+1	; 0x01
     442:	9a 81       	ldd	r25, Y+2	; 0x02
     444:	02 96       	adiw	r24, 0x02	; 2
     446:	8f df       	rcall	.-226    	; 0x366 <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	9a 81       	ldd	r25, Y+2	; 0x02
     44c:	fc 01       	movw	r30, r24
     44e:	96 89       	ldd	r25, Z+22	; 0x16
     450:	80 91 31 02 	lds	r24, 0x0231
     454:	89 17       	cp	r24, r25
     456:	30 f4       	brcc	.+12     	; 0x464 <prvCheckPendingReadyList+0x50>
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	9a 81       	ldd	r25, Y+2	; 0x02
     45c:	fc 01       	movw	r30, r24
     45e:	86 89       	ldd	r24, Z+22	; 0x16
     460:	80 93 31 02 	sts	0x0231, r24
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	ac 01       	movw	r20, r24
     46a:	4e 5f       	subi	r20, 0xFE	; 254
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	fc 01       	movw	r30, r24
     474:	86 89       	ldd	r24, Z+22	; 0x16
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	c9 01       	movw	r24, r18
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	82 0f       	add	r24, r18
     48a:	93 1f       	adc	r25, r19
     48c:	80 5f       	subi	r24, 0xF0	; 240
     48e:	9d 4f       	sbci	r25, 0xFD	; 253
     490:	ba 01       	movw	r22, r20
     492:	a5 de       	rcall	.-694    	; 0x1de <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     494:	80 91 26 02 	lds	r24, 0x0226
     498:	88 23       	and	r24, r24
     49a:	09 f0       	breq	.+2      	; 0x49e <prvCheckPendingReadyList+0x8a>
     49c:	c2 cf       	rjmp	.-124    	; 0x422 <prvCheckPendingReadyList+0xe>
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
	}
}
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <prvCheckDelayedList+0x6>
     4ae:	1f 92       	push	r1
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     4b4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
     4b8:	9c 01       	movw	r18, r24
     4ba:	80 91 34 02 	lds	r24, 0x0234
     4be:	90 91 35 02 	lds	r25, 0x0235
     4c2:	a9 01       	movw	r20, r18
     4c4:	48 1b       	sub	r20, r24
     4c6:	59 0b       	sbc	r21, r25
     4c8:	ca 01       	movw	r24, r20
     4ca:	90 93 37 02 	sts	0x0237, r25
     4ce:	80 93 36 02 	sts	0x0236, r24
	while( xPassedTicks )
     4d2:	86 c0       	rjmp	.+268    	; 0x5e0 <prvCheckDelayedList+0x138>
	{
		xCoRoutineTickCount++;
     4d4:	80 91 32 02 	lds	r24, 0x0232
     4d8:	90 91 33 02 	lds	r25, 0x0233
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	90 93 33 02 	sts	0x0233, r25
     4e2:	80 93 32 02 	sts	0x0232, r24
		xPassedTicks--;
     4e6:	80 91 36 02 	lds	r24, 0x0236
     4ea:	90 91 37 02 	lds	r25, 0x0237
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	90 93 37 02 	sts	0x0237, r25
     4f4:	80 93 36 02 	sts	0x0236, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
     4f8:	80 91 32 02 	lds	r24, 0x0232
     4fc:	90 91 33 02 	lds	r25, 0x0233
     500:	89 2b       	or	r24, r25
     502:	a1 f4       	brne	.+40     	; 0x52c <prvCheckDelayedList+0x84>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
     504:	80 91 22 02 	lds	r24, 0x0222
     508:	90 91 23 02 	lds	r25, 0x0223
     50c:	9a 83       	std	Y+2, r25	; 0x02
     50e:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     510:	80 91 24 02 	lds	r24, 0x0224
     514:	90 91 25 02 	lds	r25, 0x0225
     518:	90 93 23 02 	sts	0x0223, r25
     51c:	80 93 22 02 	sts	0x0222, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	90 93 25 02 	sts	0x0225, r25
     528:	80 93 24 02 	sts	0x0224, r24
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     52c:	50 c0       	rjmp	.+160    	; 0x5ce <prvCheckDelayedList+0x126>
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     52e:	80 91 22 02 	lds	r24, 0x0222
     532:	90 91 23 02 	lds	r25, 0x0223
     536:	fc 01       	movw	r30, r24
     538:	85 81       	ldd	r24, Z+5	; 0x05
     53a:	96 81       	ldd	r25, Z+6	; 0x06
     53c:	fc 01       	movw	r30, r24
     53e:	86 81       	ldd	r24, Z+6	; 0x06
     540:	97 81       	ldd	r25, Z+7	; 0x07
     542:	9c 83       	std	Y+4, r25	; 0x04
     544:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	9c 81       	ldd	r25, Y+4	; 0x04
     54a:	fc 01       	movw	r30, r24
     54c:	22 81       	ldd	r18, Z+2	; 0x02
     54e:	33 81       	ldd	r19, Z+3	; 0x03
     550:	80 91 32 02 	lds	r24, 0x0232
     554:	90 91 33 02 	lds	r25, 0x0233
     558:	82 17       	cp	r24, r18
     55a:	93 07       	cpc	r25, r19
     55c:	08 f4       	brcc	.+2      	; 0x560 <prvCheckDelayedList+0xb8>
			{
				/* Timeout not yet expired. */
				break;
     55e:	40 c0       	rjmp	.+128    	; 0x5e0 <prvCheckDelayedList+0x138>
			}

			portDISABLE_INTERRUPTS();
     560:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     562:	8b 81       	ldd	r24, Y+3	; 0x03
     564:	9c 81       	ldd	r25, Y+4	; 0x04
     566:	02 96       	adiw	r24, 0x02	; 2
     568:	fe de       	rcall	.-516    	; 0x366 <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
     56a:	8b 81       	ldd	r24, Y+3	; 0x03
     56c:	9c 81       	ldd	r25, Y+4	; 0x04
     56e:	fc 01       	movw	r30, r24
     570:	84 89       	ldd	r24, Z+20	; 0x14
     572:	95 89       	ldd	r25, Z+21	; 0x15
     574:	89 2b       	or	r24, r25
     576:	21 f0       	breq	.+8      	; 0x580 <prvCheckDelayedList+0xd8>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	0c 96       	adiw	r24, 0x0c	; 12
     57e:	f3 de       	rcall	.-538    	; 0x366 <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
     580:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
     582:	8b 81       	ldd	r24, Y+3	; 0x03
     584:	9c 81       	ldd	r25, Y+4	; 0x04
     586:	fc 01       	movw	r30, r24
     588:	96 89       	ldd	r25, Z+22	; 0x16
     58a:	80 91 31 02 	lds	r24, 0x0231
     58e:	89 17       	cp	r24, r25
     590:	30 f4       	brcc	.+12     	; 0x59e <prvCheckDelayedList+0xf6>
     592:	8b 81       	ldd	r24, Y+3	; 0x03
     594:	9c 81       	ldd	r25, Y+4	; 0x04
     596:	fc 01       	movw	r30, r24
     598:	86 89       	ldd	r24, Z+22	; 0x16
     59a:	80 93 31 02 	sts	0x0231, r24
     59e:	8b 81       	ldd	r24, Y+3	; 0x03
     5a0:	9c 81       	ldd	r25, Y+4	; 0x04
     5a2:	ac 01       	movw	r20, r24
     5a4:	4e 5f       	subi	r20, 0xFE	; 254
     5a6:	5f 4f       	sbci	r21, 0xFF	; 255
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	9c 81       	ldd	r25, Y+4	; 0x04
     5ac:	fc 01       	movw	r30, r24
     5ae:	86 89       	ldd	r24, Z+22	; 0x16
     5b0:	28 2f       	mov	r18, r24
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	c9 01       	movw	r24, r18
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	88 0f       	add	r24, r24
     5c0:	99 1f       	adc	r25, r25
     5c2:	82 0f       	add	r24, r18
     5c4:	93 1f       	adc	r25, r19
     5c6:	80 5f       	subi	r24, 0xF0	; 240
     5c8:	9d 4f       	sbci	r25, 0xFD	; 253
     5ca:	ba 01       	movw	r22, r20
     5cc:	08 de       	rcall	.-1008   	; 0x1de <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     5ce:	80 91 22 02 	lds	r24, 0x0222
     5d2:	90 91 23 02 	lds	r25, 0x0223
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 81       	ld	r24, Z
     5da:	88 23       	and	r24, r24
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <prvCheckDelayedList+0x138>
     5de:	a7 cf       	rjmp	.-178    	; 0x52e <prvCheckDelayedList+0x86>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
     5e0:	80 91 36 02 	lds	r24, 0x0236
     5e4:	90 91 37 02 	lds	r25, 0x0237
     5e8:	89 2b       	or	r24, r25
     5ea:	09 f0       	breq	.+2      	; 0x5ee <prvCheckDelayedList+0x146>
     5ec:	73 cf       	rjmp	.-282    	; 0x4d4 <prvCheckDelayedList+0x2c>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
     5ee:	80 91 32 02 	lds	r24, 0x0232
     5f2:	90 91 33 02 	lds	r25, 0x0233
     5f6:	90 93 35 02 	sts	0x0235, r25
     5fa:	80 93 34 02 	sts	0x0234, r24
}
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	1f 92       	push	r1
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
     618:	fd de       	rcall	.-518    	; 0x414 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
     61a:	46 df       	rcall	.-372    	; 0x4a8 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     61c:	0a c0       	rjmp	.+20     	; 0x632 <vCoRoutineSchedule+0x26>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
     61e:	80 91 31 02 	lds	r24, 0x0231
     622:	88 23       	and	r24, r24
     624:	09 f4       	brne	.+2      	; 0x628 <vCoRoutineSchedule+0x1c>
		{
			/* No more co-routines to check. */
			return;
     626:	6f c0       	rjmp	.+222    	; 0x706 <vCoRoutineSchedule+0xfa>
		}
		--uxTopCoRoutineReadyPriority;
     628:	80 91 31 02 	lds	r24, 0x0231
     62c:	81 50       	subi	r24, 0x01	; 1
     62e:	80 93 31 02 	sts	0x0231, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     632:	80 91 31 02 	lds	r24, 0x0231
     636:	28 2f       	mov	r18, r24
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	c9 01       	movw	r24, r18
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	82 0f       	add	r24, r18
     64a:	93 1f       	adc	r25, r19
     64c:	80 5f       	subi	r24, 0xF0	; 240
     64e:	9d 4f       	sbci	r25, 0xFD	; 253
     650:	fc 01       	movw	r30, r24
     652:	80 81       	ld	r24, Z
     654:	88 23       	and	r24, r24
     656:	19 f3       	breq	.-58     	; 0x61e <vCoRoutineSchedule+0x12>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     658:	80 91 31 02 	lds	r24, 0x0231
     65c:	28 2f       	mov	r18, r24
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	c9 01       	movw	r24, r18
     662:	88 0f       	add	r24, r24
     664:	99 1f       	adc	r25, r25
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
     672:	80 5f       	subi	r24, 0xF0	; 240
     674:	9d 4f       	sbci	r25, 0xFD	; 253
     676:	9a 83       	std	Y+2, r25	; 0x02
     678:	89 83       	std	Y+1, r24	; 0x01
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	9a 81       	ldd	r25, Y+2	; 0x02
     67e:	fc 01       	movw	r30, r24
     680:	81 81       	ldd	r24, Z+1	; 0x01
     682:	92 81       	ldd	r25, Z+2	; 0x02
     684:	fc 01       	movw	r30, r24
     686:	22 81       	ldd	r18, Z+2	; 0x02
     688:	33 81       	ldd	r19, Z+3	; 0x03
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	9a 81       	ldd	r25, Y+2	; 0x02
     68e:	fc 01       	movw	r30, r24
     690:	32 83       	std	Z+2, r19	; 0x02
     692:	21 83       	std	Z+1, r18	; 0x01
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	fc 01       	movw	r30, r24
     69a:	21 81       	ldd	r18, Z+1	; 0x01
     69c:	32 81       	ldd	r19, Z+2	; 0x02
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	9a 81       	ldd	r25, Y+2	; 0x02
     6a2:	03 96       	adiw	r24, 0x03	; 3
     6a4:	28 17       	cp	r18, r24
     6a6:	39 07       	cpc	r19, r25
     6a8:	69 f4       	brne	.+26     	; 0x6c4 <vCoRoutineSchedule+0xb8>
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	fc 01       	movw	r30, r24
     6b0:	81 81       	ldd	r24, Z+1	; 0x01
     6b2:	92 81       	ldd	r25, Z+2	; 0x02
     6b4:	fc 01       	movw	r30, r24
     6b6:	22 81       	ldd	r18, Z+2	; 0x02
     6b8:	33 81       	ldd	r19, Z+3	; 0x03
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
     6be:	fc 01       	movw	r30, r24
     6c0:	32 83       	std	Z+2, r19	; 0x02
     6c2:	21 83       	std	Z+1, r18	; 0x01
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	fc 01       	movw	r30, r24
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
     6cc:	92 81       	ldd	r25, Z+2	; 0x02
     6ce:	fc 01       	movw	r30, r24
     6d0:	86 81       	ldd	r24, Z+6	; 0x06
     6d2:	97 81       	ldd	r25, Z+7	; 0x07
     6d4:	90 93 30 02 	sts	0x0230, r25
     6d8:	80 93 2f 02 	sts	0x022F, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     6dc:	80 91 2f 02 	lds	r24, 0x022F
     6e0:	90 91 30 02 	lds	r25, 0x0230
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 81       	ld	r18, Z
     6e8:	31 81       	ldd	r19, Z+1	; 0x01
     6ea:	80 91 2f 02 	lds	r24, 0x022F
     6ee:	90 91 30 02 	lds	r25, 0x0230
     6f2:	fc 01       	movw	r30, r24
     6f4:	47 89       	ldd	r20, Z+23	; 0x17
     6f6:	80 91 2f 02 	lds	r24, 0x022F
     6fa:	90 91 30 02 	lds	r25, 0x0230
     6fe:	64 2f       	mov	r22, r20
     700:	f9 01       	movw	r30, r18
     702:	19 95       	eicall

	return;
     704:	00 00       	nop
}
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <pxPortInitialiseStack>:

#elif defined( portUSE_TIMER3 )
	portTIMSK &= ~( _BV(OCIE3B)|_BV(OCIE3A)|_BV(TOIE3) );	// disable all Timer3 interrupts

#endif
}
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	28 97       	sbiw	r28, 0x08	; 8
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	9c 83       	std	Y+4, r25	; 0x04
     726:	8b 83       	std	Y+3, r24	; 0x03
     728:	7e 83       	std	Y+6, r23	; 0x06
     72a:	6d 83       	std	Y+5, r22	; 0x05
     72c:	58 87       	std	Y+8, r21	; 0x08
     72e:	4f 83       	std	Y+7, r20	; 0x07
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	9c 81       	ldd	r25, Y+4	; 0x04
     734:	21 e1       	ldi	r18, 0x11	; 17
     736:	fc 01       	movw	r30, r24
     738:	20 83       	st	Z, r18
     73a:	8b 81       	ldd	r24, Y+3	; 0x03
     73c:	9c 81       	ldd	r25, Y+4	; 0x04
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	9c 83       	std	Y+4, r25	; 0x04
     742:	8b 83       	std	Y+3, r24	; 0x03
     744:	8b 81       	ldd	r24, Y+3	; 0x03
     746:	9c 81       	ldd	r25, Y+4	; 0x04
     748:	22 e2       	ldi	r18, 0x22	; 34
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	8b 81       	ldd	r24, Y+3	; 0x03
     75a:	9c 81       	ldd	r25, Y+4	; 0x04
     75c:	23 e3       	ldi	r18, 0x33	; 51
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
     762:	8b 81       	ldd	r24, Y+3	; 0x03
     764:	9c 81       	ldd	r25, Y+4	; 0x04
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	9c 83       	std	Y+4, r25	; 0x04
     76a:	8b 83       	std	Y+3, r24	; 0x03
     76c:	8d 81       	ldd	r24, Y+5	; 0x05
     76e:	9e 81       	ldd	r25, Y+6	; 0x06
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	9c 83       	std	Y+4, r25	; 0x04
     786:	8b 83       	std	Y+3, r24	; 0x03
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	89 2f       	mov	r24, r25
     78e:	99 27       	eor	r25, r25
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	29 81       	ldd	r18, Y+1	; 0x01
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	9c 81       	ldd	r25, Y+4	; 0x04
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	9c 81       	ldd	r25, Y+4	; 0x04
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	9c 83       	std	Y+4, r25	; 0x04
     7a6:	8b 83       	std	Y+3, r24	; 0x03
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	9c 81       	ldd	r25, Y+4	; 0x04
     7ac:	fc 01       	movw	r30, r24
     7ae:	10 82       	st	Z, r1
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	9c 81       	ldd	r25, Y+4	; 0x04
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	9c 83       	std	Y+4, r25	; 0x04
     7b8:	8b 83       	std	Y+3, r24	; 0x03
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	9c 81       	ldd	r25, Y+4	; 0x04
     7be:	fc 01       	movw	r30, r24
     7c0:	10 82       	st	Z, r1
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	9c 83       	std	Y+4, r25	; 0x04
     7ca:	8b 83       	std	Y+3, r24	; 0x03
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	9c 81       	ldd	r25, Y+4	; 0x04
     7d0:	20 e8       	ldi	r18, 0x80	; 128
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	9c 83       	std	Y+4, r25	; 0x04
     7de:	8b 83       	std	Y+3, r24	; 0x03
     7e0:	8b 81       	ldd	r24, Y+3	; 0x03
     7e2:	9c 81       	ldd	r25, Y+4	; 0x04
     7e4:	fc 01       	movw	r30, r24
     7e6:	10 82       	st	Z, r1
     7e8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ea:	9c 81       	ldd	r25, Y+4	; 0x04
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	9c 83       	std	Y+4, r25	; 0x04
     7f0:	8b 83       	std	Y+3, r24	; 0x03
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	9c 81       	ldd	r25, Y+4	; 0x04
     7f6:	fc 01       	movw	r30, r24
     7f8:	10 82       	st	Z, r1
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	9c 83       	std	Y+4, r25	; 0x04
     802:	8b 83       	std	Y+3, r24	; 0x03
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	fc 01       	movw	r30, r24
     80a:	10 82       	st	Z, r1
     80c:	8b 81       	ldd	r24, Y+3	; 0x03
     80e:	9c 81       	ldd	r25, Y+4	; 0x04
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	9c 83       	std	Y+4, r25	; 0x04
     814:	8b 83       	std	Y+3, r24	; 0x03
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	9c 81       	ldd	r25, Y+4	; 0x04
     81a:	22 e0       	ldi	r18, 0x02	; 2
     81c:	fc 01       	movw	r30, r24
     81e:	20 83       	st	Z, r18
     820:	8b 81       	ldd	r24, Y+3	; 0x03
     822:	9c 81       	ldd	r25, Y+4	; 0x04
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	9c 83       	std	Y+4, r25	; 0x04
     828:	8b 83       	std	Y+3, r24	; 0x03
     82a:	8b 81       	ldd	r24, Y+3	; 0x03
     82c:	9c 81       	ldd	r25, Y+4	; 0x04
     82e:	23 e0       	ldi	r18, 0x03	; 3
     830:	fc 01       	movw	r30, r24
     832:	20 83       	st	Z, r18
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	9c 81       	ldd	r25, Y+4	; 0x04
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	9c 83       	std	Y+4, r25	; 0x04
     83c:	8b 83       	std	Y+3, r24	; 0x03
     83e:	8b 81       	ldd	r24, Y+3	; 0x03
     840:	9c 81       	ldd	r25, Y+4	; 0x04
     842:	24 e0       	ldi	r18, 0x04	; 4
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	9c 83       	std	Y+4, r25	; 0x04
     850:	8b 83       	std	Y+3, r24	; 0x03
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
     856:	25 e0       	ldi	r18, 0x05	; 5
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
     85c:	8b 81       	ldd	r24, Y+3	; 0x03
     85e:	9c 81       	ldd	r25, Y+4	; 0x04
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	9c 83       	std	Y+4, r25	; 0x04
     864:	8b 83       	std	Y+3, r24	; 0x03
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	26 e0       	ldi	r18, 0x06	; 6
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	9c 81       	ldd	r25, Y+4	; 0x04
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	9c 83       	std	Y+4, r25	; 0x04
     878:	8b 83       	std	Y+3, r24	; 0x03
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	27 e0       	ldi	r18, 0x07	; 7
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	9c 83       	std	Y+4, r25	; 0x04
     88c:	8b 83       	std	Y+3, r24	; 0x03
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	9c 81       	ldd	r25, Y+4	; 0x04
     892:	28 e0       	ldi	r18, 0x08	; 8
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	9c 81       	ldd	r25, Y+4	; 0x04
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	9c 83       	std	Y+4, r25	; 0x04
     8a0:	8b 83       	std	Y+3, r24	; 0x03
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	29 e0       	ldi	r18, 0x09	; 9
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	9c 81       	ldd	r25, Y+4	; 0x04
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	9c 83       	std	Y+4, r25	; 0x04
     8b4:	8b 83       	std	Y+3, r24	; 0x03
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ba:	20 e1       	ldi	r18, 0x10	; 16
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	9c 83       	std	Y+4, r25	; 0x04
     8c8:	8b 83       	std	Y+3, r24	; 0x03
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	9c 81       	ldd	r25, Y+4	; 0x04
     8ce:	21 e1       	ldi	r18, 0x11	; 17
     8d0:	fc 01       	movw	r30, r24
     8d2:	20 83       	st	Z, r18
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	01 97       	sbiw	r24, 0x01	; 1
     8da:	9c 83       	std	Y+4, r25	; 0x04
     8dc:	8b 83       	std	Y+3, r24	; 0x03
     8de:	8b 81       	ldd	r24, Y+3	; 0x03
     8e0:	9c 81       	ldd	r25, Y+4	; 0x04
     8e2:	22 e1       	ldi	r18, 0x12	; 18
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
     8e8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ea:	9c 81       	ldd	r25, Y+4	; 0x04
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	9c 83       	std	Y+4, r25	; 0x04
     8f0:	8b 83       	std	Y+3, r24	; 0x03
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	9c 81       	ldd	r25, Y+4	; 0x04
     8f6:	23 e1       	ldi	r18, 0x13	; 19
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	9c 81       	ldd	r25, Y+4	; 0x04
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	9c 83       	std	Y+4, r25	; 0x04
     904:	8b 83       	std	Y+3, r24	; 0x03
     906:	8b 81       	ldd	r24, Y+3	; 0x03
     908:	9c 81       	ldd	r25, Y+4	; 0x04
     90a:	24 e1       	ldi	r18, 0x14	; 20
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
     910:	8b 81       	ldd	r24, Y+3	; 0x03
     912:	9c 81       	ldd	r25, Y+4	; 0x04
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	9c 83       	std	Y+4, r25	; 0x04
     918:	8b 83       	std	Y+3, r24	; 0x03
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	9c 81       	ldd	r25, Y+4	; 0x04
     91e:	25 e1       	ldi	r18, 0x15	; 21
     920:	fc 01       	movw	r30, r24
     922:	20 83       	st	Z, r18
     924:	8b 81       	ldd	r24, Y+3	; 0x03
     926:	9c 81       	ldd	r25, Y+4	; 0x04
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	9c 83       	std	Y+4, r25	; 0x04
     92c:	8b 83       	std	Y+3, r24	; 0x03
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	9c 81       	ldd	r25, Y+4	; 0x04
     932:	26 e1       	ldi	r18, 0x16	; 22
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	9c 83       	std	Y+4, r25	; 0x04
     940:	8b 83       	std	Y+3, r24	; 0x03
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	27 e1       	ldi	r18, 0x17	; 23
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	8b 81       	ldd	r24, Y+3	; 0x03
     94e:	9c 81       	ldd	r25, Y+4	; 0x04
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	9c 83       	std	Y+4, r25	; 0x04
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	9c 81       	ldd	r25, Y+4	; 0x04
     95a:	28 e1       	ldi	r18, 0x18	; 24
     95c:	fc 01       	movw	r30, r24
     95e:	20 83       	st	Z, r18
     960:	8b 81       	ldd	r24, Y+3	; 0x03
     962:	9c 81       	ldd	r25, Y+4	; 0x04
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	9c 83       	std	Y+4, r25	; 0x04
     968:	8b 83       	std	Y+3, r24	; 0x03
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	29 e1       	ldi	r18, 0x19	; 25
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	9c 83       	std	Y+4, r25	; 0x04
     97c:	8b 83       	std	Y+3, r24	; 0x03
     97e:	8b 81       	ldd	r24, Y+3	; 0x03
     980:	9c 81       	ldd	r25, Y+4	; 0x04
     982:	20 e2       	ldi	r18, 0x20	; 32
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	9c 83       	std	Y+4, r25	; 0x04
     990:	8b 83       	std	Y+3, r24	; 0x03
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	21 e2       	ldi	r18, 0x21	; 33
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	9c 81       	ldd	r25, Y+4	; 0x04
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	9c 83       	std	Y+4, r25	; 0x04
     9a4:	8b 83       	std	Y+3, r24	; 0x03
     9a6:	8b 81       	ldd	r24, Y+3	; 0x03
     9a8:	9c 81       	ldd	r25, Y+4	; 0x04
     9aa:	22 e2       	ldi	r18, 0x22	; 34
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	8b 83       	std	Y+3, r24	; 0x03
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	23 e2       	ldi	r18, 0x23	; 35
     9c0:	fc 01       	movw	r30, r24
     9c2:	20 83       	st	Z, r18
     9c4:	8b 81       	ldd	r24, Y+3	; 0x03
     9c6:	9c 81       	ldd	r25, Y+4	; 0x04
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	9c 83       	std	Y+4, r25	; 0x04
     9cc:	8b 83       	std	Y+3, r24	; 0x03
     9ce:	8f 81       	ldd	r24, Y+7	; 0x07
     9d0:	98 85       	ldd	r25, Y+8	; 0x08
     9d2:	9a 83       	std	Y+2, r25	; 0x02
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	29 81       	ldd	r18, Y+1	; 0x01
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	fc 01       	movw	r30, r24
     9de:	20 83       	st	Z, r18
     9e0:	8b 81       	ldd	r24, Y+3	; 0x03
     9e2:	9c 81       	ldd	r25, Y+4	; 0x04
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	9c 83       	std	Y+4, r25	; 0x04
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	9a 81       	ldd	r25, Y+2	; 0x02
     9ee:	89 2f       	mov	r24, r25
     9f0:	99 27       	eor	r25, r25
     9f2:	9a 83       	std	Y+2, r25	; 0x02
     9f4:	89 83       	std	Y+1, r24	; 0x01
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	9c 81       	ldd	r25, Y+4	; 0x04
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	9c 83       	std	Y+4, r25	; 0x04
     a08:	8b 83       	std	Y+3, r24	; 0x03
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	9c 81       	ldd	r25, Y+4	; 0x04
     a0e:	26 e2       	ldi	r18, 0x26	; 38
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
     a14:	8b 81       	ldd	r24, Y+3	; 0x03
     a16:	9c 81       	ldd	r25, Y+4	; 0x04
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	9c 83       	std	Y+4, r25	; 0x04
     a1c:	8b 83       	std	Y+3, r24	; 0x03
     a1e:	8b 81       	ldd	r24, Y+3	; 0x03
     a20:	9c 81       	ldd	r25, Y+4	; 0x04
     a22:	27 e2       	ldi	r18, 0x27	; 39
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	9c 81       	ldd	r25, Y+4	; 0x04
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	9c 83       	std	Y+4, r25	; 0x04
     a30:	8b 83       	std	Y+3, r24	; 0x03
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	28 e2       	ldi	r18, 0x28	; 40
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	8b 83       	std	Y+3, r24	; 0x03
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	29 e2       	ldi	r18, 0x29	; 41
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	9c 83       	std	Y+4, r25	; 0x04
     a58:	8b 83       	std	Y+3, r24	; 0x03
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	20 e3       	ldi	r18, 0x30	; 48
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	9c 83       	std	Y+4, r25	; 0x04
     a6c:	8b 83       	std	Y+3, r24	; 0x03
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	21 e3       	ldi	r18, 0x31	; 49
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	9c 83       	std	Y+4, r25	; 0x04
     a80:	8b 83       	std	Y+3, r24	; 0x03
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	9c 81       	ldd	r25, Y+4	; 0x04
     a86:	28 96       	adiw	r28, 0x08	; 8
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <xPortStartScheduler>:
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	10 d1       	rcall	.+544    	; 0xcc2 <prvSetupTimerInterrupt>
     aa2:	a0 91 f8 0d 	lds	r26, 0x0DF8
     aa6:	b0 91 f9 0d 	lds	r27, 0x0DF9
     aaa:	cd 91       	ld	r28, X+
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	dd 91       	ld	r29, X+
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	bf 91       	pop	r27
     abc:	af 91       	pop	r26
     abe:	9f 91       	pop	r25
     ac0:	8f 91       	pop	r24
     ac2:	7f 91       	pop	r23
     ac4:	6f 91       	pop	r22
     ac6:	5f 91       	pop	r21
     ac8:	4f 91       	pop	r20
     aca:	3f 91       	pop	r19
     acc:	2f 91       	pop	r18
     ace:	1f 91       	pop	r17
     ad0:	0f 91       	pop	r16
     ad2:	ff 90       	pop	r15
     ad4:	ef 90       	pop	r14
     ad6:	df 90       	pop	r13
     ad8:	cf 90       	pop	r12
     ada:	bf 90       	pop	r11
     adc:	af 90       	pop	r10
     ade:	9f 90       	pop	r9
     ae0:	8f 90       	pop	r8
     ae2:	7f 90       	pop	r7
     ae4:	6f 90       	pop	r6
     ae6:	5f 90       	pop	r5
     ae8:	4f 90       	pop	r4
     aea:	3f 90       	pop	r3
     aec:	2f 90       	pop	r2
     aee:	1f 90       	pop	r1
     af0:	0f 90       	pop	r0
     af2:	0c be       	out	0x3c, r0	; 60
     af4:	0f 90       	pop	r0
     af6:	0b be       	out	0x3b, r0	; 59
     af8:	0f 90       	pop	r0
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	0f 90       	pop	r0
     afe:	08 95       	ret
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( flatten, naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	0f 92       	push	r0
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	0c b6       	in	r0, 0x3c	; 60
     b16:	0f 92       	push	r0
     b18:	1f 92       	push	r1
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 92       	push	r2
     b1e:	3f 92       	push	r3
     b20:	4f 92       	push	r4
     b22:	5f 92       	push	r5
     b24:	6f 92       	push	r6
     b26:	7f 92       	push	r7
     b28:	8f 92       	push	r8
     b2a:	9f 92       	push	r9
     b2c:	af 92       	push	r10
     b2e:	bf 92       	push	r11
     b30:	cf 92       	push	r12
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	a0 91 f8 0d 	lds	r26, 0x0DF8
     b5c:	b0 91 f9 0d 	lds	r27, 0x0DF9
     b60:	0d b6       	in	r0, 0x3d	; 61
     b62:	0d 92       	st	X+, r0
     b64:	0e b6       	in	r0, 0x3e	; 62
     b66:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     b68:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b6c:	a0 91 f8 0d 	lds	r26, 0x0DF8
     b70:	b0 91 f9 0d 	lds	r27, 0x0DF9
     b74:	cd 91       	ld	r28, X+
     b76:	cd bf       	out	0x3d, r28	; 61
     b78:	dd 91       	ld	r29, X+
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	bf 91       	pop	r27
     b86:	af 91       	pop	r26
     b88:	9f 91       	pop	r25
     b8a:	8f 91       	pop	r24
     b8c:	7f 91       	pop	r23
     b8e:	6f 91       	pop	r22
     b90:	5f 91       	pop	r21
     b92:	4f 91       	pop	r20
     b94:	3f 91       	pop	r19
     b96:	2f 91       	pop	r18
     b98:	1f 91       	pop	r17
     b9a:	0f 91       	pop	r16
     b9c:	ff 90       	pop	r15
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	bf 90       	pop	r11
     ba6:	af 90       	pop	r10
     ba8:	9f 90       	pop	r9
     baa:	8f 90       	pop	r8
     bac:	7f 90       	pop	r7
     bae:	6f 90       	pop	r6
     bb0:	5f 90       	pop	r5
     bb2:	4f 90       	pop	r4
     bb4:	3f 90       	pop	r3
     bb6:	2f 90       	pop	r2
     bb8:	1f 90       	pop	r1
     bba:	0f 90       	pop	r0
     bbc:	0c be       	out	0x3c, r0	; 60
     bbe:	0f 90       	pop	r0
     bc0:	0b be       	out	0x3b, r0	; 59
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     bc8:	08 95       	ret

00000bca <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	0f 92       	push	r0
     bd2:	0b b6       	in	r0, 0x3b	; 59
     bd4:	0f 92       	push	r0
     bd6:	0c b6       	in	r0, 0x3c	; 60
     bd8:	0f 92       	push	r0
     bda:	1f 92       	push	r1
     bdc:	11 24       	eor	r1, r1
     bde:	2f 92       	push	r2
     be0:	3f 92       	push	r3
     be2:	4f 92       	push	r4
     be4:	5f 92       	push	r5
     be6:	6f 92       	push	r6
     be8:	7f 92       	push	r7
     bea:	8f 92       	push	r8
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
     c1a:	a0 91 f8 0d 	lds	r26, 0x0DF8
     c1e:	b0 91 f9 0d 	lds	r27, 0x0DF9
     c22:	0d b6       	in	r0, 0x3d	; 61
     c24:	0d 92       	st	X+, r0
     c26:	0e b6       	in	r0, 0x3e	; 62
     c28:	0d 92       	st	X+, r0

	if (--ticksRemainingInSec == 0)
     c2a:	80 91 3a 02 	lds	r24, 0x023A
     c2e:	90 91 3b 02 	lds	r25, 0x023B
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	90 93 3b 02 	sts	0x023B, r25
     c38:	80 93 3a 02 	sts	0x023A, r24
     c3c:	80 91 3a 02 	lds	r24, 0x023A
     c40:	90 91 3b 02 	lds	r25, 0x023B
     c44:	89 2b       	or	r24, r25
     c46:	41 f4       	brne	.+16     	; 0xc58 <vPortYieldFromTick+0x8e>
	{
//		system_tick();
		ticksRemainingInSec = portTickRateHz;
     c48:	80 91 38 02 	lds	r24, 0x0238
     c4c:	90 91 39 02 	lds	r25, 0x0239
     c50:	90 93 3b 02 	sts	0x023B, r25
     c54:	80 93 3a 02 	sts	0x023A, r24
	}

	if( xTaskIncrementTick() != pdFALSE )
     c58:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <xTaskIncrementTick>
     c5c:	88 23       	and	r24, r24
     c5e:	11 f0       	breq	.+4      	; 0xc64 <vPortYieldFromTick+0x9a>
	{
		vTaskSwitchContext();
     c60:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <vTaskSwitchContext>
	}

	portRESTORE_CONTEXT();
     c64:	a0 91 f8 0d 	lds	r26, 0x0DF8
     c68:	b0 91 f9 0d 	lds	r27, 0x0DF9
     c6c:	cd 91       	ld	r28, X+
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	dd 91       	ld	r29, X+
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	bf 91       	pop	r27
     c7e:	af 91       	pop	r26
     c80:	9f 91       	pop	r25
     c82:	8f 91       	pop	r24
     c84:	7f 91       	pop	r23
     c86:	6f 91       	pop	r22
     c88:	5f 91       	pop	r21
     c8a:	4f 91       	pop	r20
     c8c:	3f 91       	pop	r19
     c8e:	2f 91       	pop	r18
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	ff 90       	pop	r15
     c96:	ef 90       	pop	r14
     c98:	df 90       	pop	r13
     c9a:	cf 90       	pop	r12
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	9f 90       	pop	r9
     ca2:	8f 90       	pop	r8
     ca4:	7f 90       	pop	r7
     ca6:	6f 90       	pop	r6
     ca8:	5f 90       	pop	r5
     caa:	4f 90       	pop	r4
     cac:	3f 90       	pop	r3
     cae:	2f 90       	pop	r2
     cb0:	1f 90       	pop	r1
     cb2:	0f 90       	pop	r0
     cb4:	0c be       	out	0x3c, r0	; 60
     cb6:	0f 90       	pop	r0
     cb8:	0b be       	out	0x3b, r0	; 59
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	0f 90       	pop	r0

	__asm__ __volatile__ ( "ret" );
     cc0:	08 95       	ret

00000cc2 <prvSetupTimerInterrupt>:
#ifndef portUSE_TIMER2
/*
 * Setup timer 0 or 1 or 3 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	2a 97       	sbiw	r28, 0x0a	; 10
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
    /* Using 8bit Timer0 or 16bit Timer1 or Timer3 to generate the tick. Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock.*/

    // ulCompareMatch 40,000 = 20,000,000 / 500; 20MHz
    // ulCompareMatch 110,592 = 22,118,400 / 200; 22.1184 MHz
    ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     cd6:	80 e1       	ldi	r24, 0x10	; 16
     cd8:	97 e2       	ldi	r25, 0x27	; 39
     cda:	a0 e0       	ldi	r26, 0x00	; 0
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	9a 83       	std	Y+2, r25	; 0x02
     ce2:	ab 83       	std	Y+3, r26	; 0x03
     ce4:	bc 83       	std	Y+4, r27	; 0x04

    /* We only have 8 or 16 bits so have to scale 64 or 256 to get our required tick rate. */
    //ulCompareMatch = 625 /= portCLOCK_PRESCALER; 20MHz with 64 prescale
    //ulCompareMatch = 108 /= portCLOCK_PRESCALER; 22.1184 MHz with 1024 prescale
    ulCompareMatch /= portCLOCK_PRESCALER;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	ab 81       	ldd	r26, Y+3	; 0x03
     cec:	bc 81       	ldd	r27, Y+4	; 0x04
     cee:	68 94       	set
     cf0:	15 f8       	bld	r1, 5
     cf2:	b6 95       	lsr	r27
     cf4:	a7 95       	ror	r26
     cf6:	97 95       	ror	r25
     cf8:	87 95       	ror	r24
     cfa:	16 94       	lsr	r1
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <prvSetupTimerInterrupt+0x30>
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	9a 83       	std	Y+2, r25	; 0x02
     d02:	ab 83       	std	Y+3, r26	; 0x03
     d04:	bc 83       	std	Y+4, r27	; 0x04

 	/* actual port tick rate in Hz, calculated */
	portTickRateHz = (TickType_t) ((uint32_t) configCPU_CLOCK_HZ / ( portCLOCK_PRESCALER * ulCompareMatch ));
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	ab 81       	ldd	r26, Y+3	; 0x03
     d0c:	bc 81       	ldd	r27, Y+4	; 0x04
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	aa 1f       	adc	r26, r26
     d14:	bb 1f       	adc	r27, r27
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	aa 1f       	adc	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	aa 1f       	adc	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	aa 1f       	adc	r26, r26
     d2c:	bb 1f       	adc	r27, r27
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	aa 1f       	adc	r26, r26
     d34:	bb 1f       	adc	r27, r27
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	aa 1f       	adc	r26, r26
     d3c:	bb 1f       	adc	r27, r27
     d3e:	9c 01       	movw	r18, r24
     d40:	ad 01       	movw	r20, r26
     d42:	80 e8       	ldi	r24, 0x80	; 128
     d44:	96 e9       	ldi	r25, 0x96	; 150
     d46:	a8 e9       	ldi	r26, 0x98	; 152
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	0e 94 bb 14 	call	0x2976	; 0x2976 <__udivmodsi4>
     d52:	da 01       	movw	r26, r20
     d54:	c9 01       	movw	r24, r18
     d56:	90 93 39 02 	sts	0x0239, r25
     d5a:	80 93 38 02 	sts	0x0238, r24
	/* initialise first second of ticks */
	ticksRemainingInSec = portTickRateHz;
     d5e:	80 91 38 02 	lds	r24, 0x0238
     d62:	90 91 39 02 	lds	r25, 0x0239
     d66:	90 93 3b 02 	sts	0x023B, r25
     d6a:	80 93 3a 02 	sts	0x023A, r24

    /* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	ab 81       	ldd	r26, Y+3	; 0x03
     d74:	bc 81       	ldd	r27, Y+4	; 0x04
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	a1 09       	sbc	r26, r1
     d7a:	b1 09       	sbc	r27, r1
     d7c:	89 83       	std	Y+1, r24	; 0x01
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	ab 83       	std	Y+3, r26	; 0x03
     d82:	bc 83       	std	Y+4, r27	; 0x04

    /* Setup compare match value for compare match A.  Interrupts are disabled
    before this is called so we need not worry here. */
    ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	8d 83       	std	Y+5, r24	; 0x05
    //  OCR3AH = ucHighByte;
    //  OCR3AL = ucLowByte;

    // the HiByte is only needed, if a 16 Bit counter is being utilized
#ifdef portOCRH
    ulCompareMatch >>= 8;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	ab 81       	ldd	r26, Y+3	; 0x03
     d8e:	bc 81       	ldd	r27, Y+4	; 0x04
     d90:	89 2f       	mov	r24, r25
     d92:	9a 2f       	mov	r25, r26
     d94:	ab 2f       	mov	r26, r27
     d96:	bb 27       	eor	r27, r27
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	ab 83       	std	Y+3, r26	; 0x03
     d9e:	bc 83       	std	Y+4, r27	; 0x04
    ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t) 0xff );
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	8e 83       	std	Y+6, r24	; 0x06
    portOCRH = ucHighByte;
     da4:	89 e9       	ldi	r24, 0x99	; 153
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	2e 81       	ldd	r18, Y+6	; 0x06
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
#endif

    portOCRL = ucLowByte;
     dae:	88 e9       	ldi	r24, 0x98	; 152
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	2d 81       	ldd	r18, Y+5	; 0x05
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	portTCCRb = ucLowByte;

#elif defined( portUSE_TIMER3 )
	/* Setup clock source and compare match behaviour. Assuming  640 / 1280 /1281 / 1284p / 2560 / 2561 (with Timer3) */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
     db8:	8b e0       	ldi	r24, 0x0B	; 11
     dba:	8d 83       	std	Y+5, r24	; 0x05
	portTCCRb = ucLowByte;
     dbc:	81 e9       	ldi	r24, 0x91	; 145
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	2d 81       	ldd	r18, Y+5	; 0x05
     dc2:	fc 01       	movw	r30, r24
     dc4:	20 83       	st	Z, r18
#endif

    /* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
    ucLowByte = portTIMSK;
     dc6:	81 e7       	ldi	r24, 0x71	; 113
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	80 81       	ld	r24, Z
     dce:	8d 83       	std	Y+5, r24	; 0x05
    ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	82 60       	ori	r24, 0x02	; 2
     dd4:	8d 83       	std	Y+5, r24	; 0x05
    portTIMSK = ucLowByte;
     dd6:	81 e7       	ldi	r24, 0x71	; 113
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	2d 81       	ldd	r18, Y+5	; 0x05
     ddc:	fc 01       	movw	r30, r24
     dde:	20 83       	st	Z, r18

}
     de0:	2a 96       	adiw	r28, 0x0a	; 10
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	df 91       	pop	r29
     dee:	cf 91       	pop	r28
     df0:	08 95       	ret

00000df2 <__vector_32>:
	 */
//	ISR(TIMER_COMPA_ISR, ISR_NAKED ISR_NOBLOCK)
	ISR(TIMER_COMPA_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
	ISR(TIMER_COMPA_ISR, ISR_NAKED)
	{
		vPortYieldFromTick();
     df2:	eb de       	rcall	.-554    	; 0xbca <vPortYieldFromTick>
		__asm__ __volatile__ ( "reti" );
     df4:	18 95       	reti

00000df6 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <pvPortMalloc+0x6>
     dfc:	1f 92       	push	r1
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9c 83       	std	Y+4, r25	; 0x04
     e04:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
     e06:	1a 82       	std	Y+2, r1	; 0x02
     e08:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     e0a:	ba d6       	rcall	.+3444   	; 0x1b80 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     e0c:	80 91 f6 0d 	lds	r24, 0x0DF6
     e10:	90 91 f7 0d 	lds	r25, 0x0DF7
     e14:	89 2b       	or	r24, r25
     e16:	31 f4       	brne	.+12     	; 0xe24 <pvPortMalloc+0x2e>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     e18:	8d e3       	ldi	r24, 0x3D	; 61
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	90 93 f7 0d 	sts	0x0DF7, r25
     e20:	80 93 f6 0d 	sts	0x0DF6, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     e24:	20 91 f4 0d 	lds	r18, 0x0DF4
     e28:	30 91 f5 0d 	lds	r19, 0x0DF5
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	87 3b       	cpi	r24, 0xB7	; 183
     e36:	9b 40       	sbci	r25, 0x0B	; 11
     e38:	38 f5       	brcc	.+78     	; 0xe88 <pvPortMalloc+0x92>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     e3a:	20 91 f4 0d 	lds	r18, 0x0DF4
     e3e:	30 91 f5 0d 	lds	r19, 0x0DF5
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	28 0f       	add	r18, r24
     e48:	39 1f       	adc	r19, r25
     e4a:	80 91 f4 0d 	lds	r24, 0x0DF4
     e4e:	90 91 f5 0d 	lds	r25, 0x0DF5
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     e52:	82 17       	cp	r24, r18
     e54:	93 07       	cpc	r25, r19
     e56:	c0 f4       	brcc	.+48     	; 0xe88 <pvPortMalloc+0x92>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     e58:	20 91 f6 0d 	lds	r18, 0x0DF6
     e5c:	30 91 f7 0d 	lds	r19, 0x0DF7
     e60:	80 91 f4 0d 	lds	r24, 0x0DF4
     e64:	90 91 f5 0d 	lds	r25, 0x0DF5
     e68:	82 0f       	add	r24, r18
     e6a:	93 1f       	adc	r25, r19
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
     e70:	20 91 f4 0d 	lds	r18, 0x0DF4
     e74:	30 91 f5 0d 	lds	r19, 0x0DF5
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	90 93 f5 0d 	sts	0x0DF5, r25
     e84:	80 93 f4 0d 	sts	0x0DF4, r24
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     e88:	87 d6       	rcall	.+3342   	; 0x1b98 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	1f 92       	push	r1
     ea2:	1f 92       	push	r1
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	00 d0       	rcall	.+0      	; 0xebc <xQueueGenericReset+0x6>
     ebc:	1f 92       	push	r1
     ebe:	1f 92       	push	r1
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	9c 83       	std	Y+4, r25	; 0x04
     ec6:	8b 83       	std	Y+3, r24	; 0x03
     ec8:	6d 83       	std	Y+5, r22	; 0x05
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	0f 92       	push	r0
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	fc 01       	movw	r30, r24
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	29 81       	ldd	r18, Y+1	; 0x01
     ee4:	3a 81       	ldd	r19, Y+2	; 0x02
     ee6:	f9 01       	movw	r30, r18
     ee8:	23 8d       	ldd	r18, Z+27	; 0x1b
     eea:	42 2f       	mov	r20, r18
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	3a 81       	ldd	r19, Y+2	; 0x02
     ef2:	f9 01       	movw	r30, r18
     ef4:	24 8d       	ldd	r18, Z+28	; 0x1c
     ef6:	22 2f       	mov	r18, r18
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	42 9f       	mul	r20, r18
     efc:	b0 01       	movw	r22, r0
     efe:	43 9f       	mul	r20, r19
     f00:	70 0d       	add	r23, r0
     f02:	52 9f       	mul	r21, r18
     f04:	70 0d       	add	r23, r0
     f06:	11 24       	eor	r1, r1
     f08:	9b 01       	movw	r18, r22
     f0a:	28 0f       	add	r18, r24
     f0c:	39 1f       	adc	r19, r25
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	fc 01       	movw	r30, r24
     f14:	33 83       	std	Z+3, r19	; 0x03
     f16:	22 83       	std	Z+2, r18	; 0x02
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	fc 01       	movw	r30, r24
     f1e:	12 8e       	std	Z+26, r1	; 0x1a
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	20 81       	ld	r18, Z
     f28:	31 81       	ldd	r19, Z+1	; 0x01
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	fc 01       	movw	r30, r24
     f30:	35 83       	std	Z+5, r19	; 0x05
     f32:	24 83       	std	Z+4, r18	; 0x04
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	fc 01       	movw	r30, r24
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	29 81       	ldd	r18, Y+1	; 0x01
     f40:	3a 81       	ldd	r19, Y+2	; 0x02
     f42:	f9 01       	movw	r30, r18
     f44:	23 8d       	ldd	r18, Z+27	; 0x1b
     f46:	22 2f       	mov	r18, r18
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	a9 01       	movw	r20, r18
     f4c:	41 50       	subi	r20, 0x01	; 1
     f4e:	51 09       	sbc	r21, r1
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	3a 81       	ldd	r19, Y+2	; 0x02
     f54:	f9 01       	movw	r30, r18
     f56:	24 8d       	ldd	r18, Z+28	; 0x1c
     f58:	22 2f       	mov	r18, r18
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	42 9f       	mul	r20, r18
     f5e:	b0 01       	movw	r22, r0
     f60:	43 9f       	mul	r20, r19
     f62:	70 0d       	add	r23, r0
     f64:	52 9f       	mul	r21, r18
     f66:	70 0d       	add	r23, r0
     f68:	11 24       	eor	r1, r1
     f6a:	9b 01       	movw	r18, r22
     f6c:	28 0f       	add	r18, r24
     f6e:	39 1f       	adc	r19, r25
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	9a 81       	ldd	r25, Y+2	; 0x02
     f74:	fc 01       	movw	r30, r24
     f76:	37 83       	std	Z+7, r19	; 0x07
     f78:	26 83       	std	Z+6, r18	; 0x06
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	9a 81       	ldd	r25, Y+2	; 0x02
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	fc 01       	movw	r30, r24
     f82:	25 8f       	std	Z+29, r18	; 0x1d
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	2f ef       	ldi	r18, 0xFF	; 255
     f8a:	fc 01       	movw	r30, r24
     f8c:	26 8f       	std	Z+30, r18	; 0x1e
     f8e:	8d 81       	ldd	r24, Y+5	; 0x05
     f90:	88 23       	and	r24, r24
     f92:	79 f4       	brne	.+30     	; 0xfb2 <xQueueGenericReset+0xfc>
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	fc 01       	movw	r30, r24
     f9a:	80 85       	ldd	r24, Z+8	; 0x08
     f9c:	88 23       	and	r24, r24
     f9e:	89 f0       	breq	.+34     	; 0xfc2 <xQueueGenericReset+0x10c>
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	08 96       	adiw	r24, 0x08	; 8
     fa6:	0e 94 1e 10 	call	0x203c	; 0x203c <xTaskRemoveFromEventList>
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	51 f4       	brne	.+20     	; 0xfc2 <xQueueGenericReset+0x10c>
     fae:	ac dd       	rcall	.-1192   	; 0xb08 <vPortYield>
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <xQueueGenericReset+0x10c>
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	08 96       	adiw	r24, 0x08	; 8
     fb8:	ca d8       	rcall	.-3692   	; 0x14e <vListInitialise>
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	41 96       	adiw	r24, 0x11	; 17
     fc0:	c6 d8       	rcall	.-3700   	; 0x14e <vListInitialise>
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	08 95       	ret

00000fd8 <xQueueGenericCreate>:
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	2b 97       	sbiw	r28, 0x0b	; 11
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	89 87       	std	Y+9, r24	; 0x09
     fee:	6a 87       	std	Y+10, r22	; 0x0a
     ff0:	4b 87       	std	Y+11, r20	; 0x0b
     ff2:	1c 82       	std	Y+4, r1	; 0x04
     ff4:	1b 82       	std	Y+3, r1	; 0x03
     ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff8:	88 23       	and	r24, r24
     ffa:	19 f4       	brne	.+6      	; 0x1002 <xQueueGenericCreate+0x2a>
     ffc:	1a 82       	std	Y+2, r1	; 0x02
     ffe:	19 82       	std	Y+1, r1	; 0x01
    1000:	11 c0       	rjmp	.+34     	; 0x1024 <xQueueGenericCreate+0x4c>
    1002:	89 85       	ldd	r24, Y+9	; 0x09
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 85       	ldd	r24, Y+10	; 0x0a
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	28 9f       	mul	r18, r24
    1010:	a0 01       	movw	r20, r0
    1012:	29 9f       	mul	r18, r25
    1014:	50 0d       	add	r21, r0
    1016:	38 9f       	mul	r19, r24
    1018:	50 0d       	add	r21, r0
    101a:	11 24       	eor	r1, r1
    101c:	ca 01       	movw	r24, r20
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	4f 96       	adiw	r24, 0x1f	; 31
    102a:	e5 de       	rcall	.-566    	; 0xdf6 <pvPortMalloc>
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	8d 81       	ldd	r24, Y+5	; 0x05
    1032:	9e 81       	ldd	r25, Y+6	; 0x06
    1034:	89 2b       	or	r24, r25
    1036:	59 f1       	breq	.+86     	; 0x108e <xQueueGenericCreate+0xb6>
    1038:	8d 81       	ldd	r24, Y+5	; 0x05
    103a:	9e 81       	ldd	r25, Y+6	; 0x06
    103c:	98 87       	std	Y+8, r25	; 0x08
    103e:	8f 83       	std	Y+7, r24	; 0x07
    1040:	8a 85       	ldd	r24, Y+10	; 0x0a
    1042:	88 23       	and	r24, r24
    1044:	41 f4       	brne	.+16     	; 0x1056 <xQueueGenericCreate+0x7e>
    1046:	8f 81       	ldd	r24, Y+7	; 0x07
    1048:	98 85       	ldd	r25, Y+8	; 0x08
    104a:	2f 81       	ldd	r18, Y+7	; 0x07
    104c:	38 85       	ldd	r19, Y+8	; 0x08
    104e:	fc 01       	movw	r30, r24
    1050:	31 83       	std	Z+1, r19	; 0x01
    1052:	20 83       	st	Z, r18
    1054:	0a c0       	rjmp	.+20     	; 0x106a <xQueueGenericCreate+0x92>
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	9c 01       	movw	r18, r24
    105c:	21 5e       	subi	r18, 0xE1	; 225
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	8f 81       	ldd	r24, Y+7	; 0x07
    1062:	98 85       	ldd	r25, Y+8	; 0x08
    1064:	fc 01       	movw	r30, r24
    1066:	31 83       	std	Z+1, r19	; 0x01
    1068:	20 83       	st	Z, r18
    106a:	8f 81       	ldd	r24, Y+7	; 0x07
    106c:	98 85       	ldd	r25, Y+8	; 0x08
    106e:	29 85       	ldd	r18, Y+9	; 0x09
    1070:	fc 01       	movw	r30, r24
    1072:	23 8f       	std	Z+27, r18	; 0x1b
    1074:	8f 81       	ldd	r24, Y+7	; 0x07
    1076:	98 85       	ldd	r25, Y+8	; 0x08
    1078:	2a 85       	ldd	r18, Y+10	; 0x0a
    107a:	fc 01       	movw	r30, r24
    107c:	24 8f       	std	Z+28, r18	; 0x1c
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	18 df       	rcall	.-464    	; 0xeb6 <xQueueGenericReset>
    1086:	8f 81       	ldd	r24, Y+7	; 0x07
    1088:	98 85       	ldd	r25, Y+8	; 0x08
    108a:	9c 83       	std	Y+4, r25	; 0x04
    108c:	8b 83       	std	Y+3, r24	; 0x03
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	2b 96       	adiw	r28, 0x0b	; 11
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <xQueueGenericSend>:
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	2e 97       	sbiw	r28, 0x0e	; 14
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	99 87       	std	Y+9, r25	; 0x09
    10ba:	88 87       	std	Y+8, r24	; 0x08
    10bc:	7b 87       	std	Y+11, r23	; 0x0b
    10be:	6a 87       	std	Y+10, r22	; 0x0a
    10c0:	5d 87       	std	Y+13, r21	; 0x0d
    10c2:	4c 87       	std	Y+12, r20	; 0x0c
    10c4:	2e 87       	std	Y+14, r18	; 0x0e
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	88 85       	ldd	r24, Y+8	; 0x08
    10ca:	99 85       	ldd	r25, Y+9	; 0x09
    10cc:	9b 83       	std	Y+3, r25	; 0x03
    10ce:	8a 83       	std	Y+2, r24	; 0x02
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	0f 92       	push	r0
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	fc 01       	movw	r30, r24
    10dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	9b 81       	ldd	r25, Y+3	; 0x03
    10e2:	fc 01       	movw	r30, r24
    10e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    10e6:	28 17       	cp	r18, r24
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <xQueueGenericSend+0x4c>
    10ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	f1 f4       	brne	.+60     	; 0x112c <xQueueGenericSend+0x88>
    10f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    10f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	4e 85       	ldd	r20, Y+14	; 0x0e
    10fa:	b9 01       	movw	r22, r18
    10fc:	4b d2       	rcall	.+1174   	; 0x1594 <prvCopyDataToQueue>
    10fe:	8c 83       	std	Y+4, r24	; 0x04
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	9b 81       	ldd	r25, Y+3	; 0x03
    1104:	fc 01       	movw	r30, r24
    1106:	81 89       	ldd	r24, Z+17	; 0x11
    1108:	88 23       	and	r24, r24
    110a:	41 f0       	breq	.+16     	; 0x111c <xQueueGenericSend+0x78>
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	9b 81       	ldd	r25, Y+3	; 0x03
    1110:	41 96       	adiw	r24, 0x11	; 17
    1112:	94 d7       	rcall	.+3880   	; 0x203c <xTaskRemoveFromEventList>
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	31 f4       	brne	.+12     	; 0x1124 <xQueueGenericSend+0x80>
    1118:	f7 dc       	rcall	.-1554   	; 0xb08 <vPortYield>
    111a:	04 c0       	rjmp	.+8      	; 0x1124 <xQueueGenericSend+0x80>
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	88 23       	and	r24, r24
    1120:	09 f0       	breq	.+2      	; 0x1124 <xQueueGenericSend+0x80>
    1122:	f2 dc       	rcall	.-1564   	; 0xb08 <vPortYield>
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	55 c0       	rjmp	.+170    	; 0x11d6 <xQueueGenericSend+0x132>
    112c:	8c 85       	ldd	r24, Y+12	; 0x0c
    112e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1130:	89 2b       	or	r24, r25
    1132:	21 f4       	brne	.+8      	; 0x113c <xQueueGenericSend+0x98>
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	4d c0       	rjmp	.+154    	; 0x11d6 <xQueueGenericSend+0x132>
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	88 23       	and	r24, r24
    1140:	29 f4       	brne	.+10     	; 0x114c <xQueueGenericSend+0xa8>
    1142:	ce 01       	movw	r24, r28
    1144:	05 96       	adiw	r24, 0x05	; 5
    1146:	e7 d7       	rcall	.+4046   	; 0x2116 <vTaskSetTimeOutState>
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	17 d5       	rcall	.+2606   	; 0x1b80 <vTaskSuspendAll>
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	f8 94       	cli
    1156:	0f 92       	push	r0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	9b 81       	ldd	r25, Y+3	; 0x03
    115c:	fc 01       	movw	r30, r24
    115e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1160:	8f 3f       	cpi	r24, 0xFF	; 255
    1162:	21 f4       	brne	.+8      	; 0x116c <xQueueGenericSend+0xc8>
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	fc 01       	movw	r30, r24
    116a:	15 8e       	std	Z+29, r1	; 0x1d
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	9b 81       	ldd	r25, Y+3	; 0x03
    1170:	fc 01       	movw	r30, r24
    1172:	86 8d       	ldd	r24, Z+30	; 0x1e
    1174:	8f 3f       	cpi	r24, 0xFF	; 255
    1176:	21 f4       	brne	.+8      	; 0x1180 <xQueueGenericSend+0xdc>
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	fc 01       	movw	r30, r24
    117e:	16 8e       	std	Z+30, r1	; 0x1e
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	9e 01       	movw	r18, r28
    1186:	24 5f       	subi	r18, 0xF4	; 244
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	ce 01       	movw	r24, r28
    118c:	05 96       	adiw	r24, 0x05	; 5
    118e:	b9 01       	movw	r22, r18
    1190:	de d7       	rcall	.+4028   	; 0x214e <xTaskCheckForTimeOut>
    1192:	88 23       	and	r24, r24
    1194:	c9 f4       	brne	.+50     	; 0x11c8 <xQueueGenericSend+0x124>
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	9b 81       	ldd	r25, Y+3	; 0x03
    119a:	89 d3       	rcall	.+1810   	; 0x18ae <prvIsQueueFull>
    119c:	88 23       	and	r24, r24
    119e:	79 f0       	breq	.+30     	; 0x11be <xQueueGenericSend+0x11a>
    11a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	08 96       	adiw	r24, 0x08	; 8
    11aa:	b9 01       	movw	r22, r18
    11ac:	14 d7       	rcall	.+3624   	; 0x1fd6 <vTaskPlaceOnEventList>
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	9b 81       	ldd	r25, Y+3	; 0x03
    11b2:	ff d2       	rcall	.+1534   	; 0x17b2 <prvUnlockQueue>
    11b4:	f1 d4       	rcall	.+2530   	; 0x1b98 <xTaskResumeAll>
    11b6:	88 23       	and	r24, r24
    11b8:	69 f4       	brne	.+26     	; 0x11d4 <xQueueGenericSend+0x130>
    11ba:	a6 dc       	rcall	.-1716   	; 0xb08 <vPortYield>
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <xQueueGenericSend+0x130>
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	9b 81       	ldd	r25, Y+3	; 0x03
    11c2:	f7 d2       	rcall	.+1518   	; 0x17b2 <prvUnlockQueue>
    11c4:	e9 d4       	rcall	.+2514   	; 0x1b98 <xTaskResumeAll>
    11c6:	84 cf       	rjmp	.-248    	; 0x10d0 <xQueueGenericSend+0x2c>
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	f2 d2       	rcall	.+1508   	; 0x17b2 <prvUnlockQueue>
    11ce:	e4 d4       	rcall	.+2504   	; 0x1b98 <xTaskResumeAll>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <xQueueGenericSend+0x132>
    11d4:	7d cf       	rjmp	.-262    	; 0x10d0 <xQueueGenericSend+0x2c>
    11d6:	2e 96       	adiw	r28, 0x0e	; 14
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <xQueueGenericSendFromISR>:
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	2b 97       	sbiw	r28, 0x0b	; 11
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	8d 83       	std	Y+5, r24	; 0x05
    1200:	78 87       	std	Y+8, r23	; 0x08
    1202:	6f 83       	std	Y+7, r22	; 0x07
    1204:	5a 87       	std	Y+10, r21	; 0x0a
    1206:	49 87       	std	Y+9, r20	; 0x09
    1208:	2b 87       	std	Y+11, r18	; 0x0b
    120a:	8d 81       	ldd	r24, Y+5	; 0x05
    120c:	9e 81       	ldd	r25, Y+6	; 0x06
    120e:	9b 83       	std	Y+3, r25	; 0x03
    1210:	8a 83       	std	Y+2, r24	; 0x02
    1212:	1c 82       	std	Y+4, r1	; 0x04
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	fc 01       	movw	r30, r24
    121a:	22 8d       	ldd	r18, Z+26	; 0x1a
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	9b 81       	ldd	r25, Y+3	; 0x03
    1220:	fc 01       	movw	r30, r24
    1222:	83 8d       	ldd	r24, Z+27	; 0x1b
    1224:	28 17       	cp	r18, r24
    1226:	18 f0       	brcs	.+6      	; 0x122e <xQueueGenericSendFromISR+0x46>
    1228:	8b 85       	ldd	r24, Y+11	; 0x0b
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	81 f5       	brne	.+96     	; 0x128e <xQueueGenericSendFromISR+0xa6>
    122e:	2f 81       	ldd	r18, Y+7	; 0x07
    1230:	38 85       	ldd	r19, Y+8	; 0x08
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	4b 85       	ldd	r20, Y+11	; 0x0b
    1238:	b9 01       	movw	r22, r18
    123a:	ac d1       	rcall	.+856    	; 0x1594 <prvCopyDataToQueue>
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	fc 01       	movw	r30, r24
    1242:	86 8d       	ldd	r24, Z+30	; 0x1e
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	b1 f4       	brne	.+44     	; 0x1274 <xQueueGenericSendFromISR+0x8c>
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	fc 01       	movw	r30, r24
    124e:	81 89       	ldd	r24, Z+17	; 0x11
    1250:	88 23       	and	r24, r24
    1252:	d1 f0       	breq	.+52     	; 0x1288 <xQueueGenericSendFromISR+0xa0>
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	9b 81       	ldd	r25, Y+3	; 0x03
    1258:	41 96       	adiw	r24, 0x11	; 17
    125a:	f0 d6       	rcall	.+3552   	; 0x203c <xTaskRemoveFromEventList>
    125c:	88 23       	and	r24, r24
    125e:	a1 f0       	breq	.+40     	; 0x1288 <xQueueGenericSendFromISR+0xa0>
    1260:	89 85       	ldd	r24, Y+9	; 0x09
    1262:	9a 85       	ldd	r25, Y+10	; 0x0a
    1264:	89 2b       	or	r24, r25
    1266:	81 f0       	breq	.+32     	; 0x1288 <xQueueGenericSendFromISR+0xa0>
    1268:	89 85       	ldd	r24, Y+9	; 0x09
    126a:	9a 85       	ldd	r25, Y+10	; 0x0a
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	fc 01       	movw	r30, r24
    1270:	20 83       	st	Z, r18
    1272:	0a c0       	rjmp	.+20     	; 0x1288 <xQueueGenericSendFromISR+0xa0>
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	9b 81       	ldd	r25, Y+3	; 0x03
    1278:	fc 01       	movw	r30, r24
    127a:	86 8d       	ldd	r24, Z+30	; 0x1e
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	28 2f       	mov	r18, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	fc 01       	movw	r30, r24
    1286:	26 8f       	std	Z+30, r18	; 0x1e
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <xQueueGenericSendFromISR+0xa8>
    128e:	19 82       	std	Y+1, r1	; 0x01
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	2b 96       	adiw	r28, 0x0b	; 11
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <xQueueGiveFromISR>:
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	28 97       	sbiw	r28, 0x08	; 8
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	78 87       	std	Y+8, r23	; 0x08
    12be:	6f 83       	std	Y+7, r22	; 0x07
    12c0:	8d 81       	ldd	r24, Y+5	; 0x05
    12c2:	9e 81       	ldd	r25, Y+6	; 0x06
    12c4:	9b 83       	std	Y+3, r25	; 0x03
    12c6:	8a 83       	std	Y+2, r24	; 0x02
    12c8:	1c 82       	std	Y+4, r1	; 0x04
    12ca:	8a 81       	ldd	r24, Y+2	; 0x02
    12cc:	9b 81       	ldd	r25, Y+3	; 0x03
    12ce:	fc 01       	movw	r30, r24
    12d0:	22 8d       	ldd	r18, Z+26	; 0x1a
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	9b 81       	ldd	r25, Y+3	; 0x03
    12d6:	fc 01       	movw	r30, r24
    12d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    12da:	28 17       	cp	r18, r24
    12dc:	98 f5       	brcc	.+102    	; 0x1344 <xQueueGiveFromISR+0xa0>
    12de:	8a 81       	ldd	r24, Y+2	; 0x02
    12e0:	9b 81       	ldd	r25, Y+3	; 0x03
    12e2:	fc 01       	movw	r30, r24
    12e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	28 0f       	add	r18, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	9b 81       	ldd	r25, Y+3	; 0x03
    12ee:	fc 01       	movw	r30, r24
    12f0:	22 8f       	std	Z+26, r18	; 0x1a
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	fc 01       	movw	r30, r24
    12f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    12fa:	8f 3f       	cpi	r24, 0xFF	; 255
    12fc:	b1 f4       	brne	.+44     	; 0x132a <xQueueGiveFromISR+0x86>
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	fc 01       	movw	r30, r24
    1304:	81 89       	ldd	r24, Z+17	; 0x11
    1306:	88 23       	and	r24, r24
    1308:	d1 f0       	breq	.+52     	; 0x133e <xQueueGiveFromISR+0x9a>
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	9b 81       	ldd	r25, Y+3	; 0x03
    130e:	41 96       	adiw	r24, 0x11	; 17
    1310:	95 d6       	rcall	.+3370   	; 0x203c <xTaskRemoveFromEventList>
    1312:	88 23       	and	r24, r24
    1314:	a1 f0       	breq	.+40     	; 0x133e <xQueueGiveFromISR+0x9a>
    1316:	8f 81       	ldd	r24, Y+7	; 0x07
    1318:	98 85       	ldd	r25, Y+8	; 0x08
    131a:	89 2b       	or	r24, r25
    131c:	81 f0       	breq	.+32     	; 0x133e <xQueueGiveFromISR+0x9a>
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	21 e0       	ldi	r18, 0x01	; 1
    1324:	fc 01       	movw	r30, r24
    1326:	20 83       	st	Z, r18
    1328:	0a c0       	rjmp	.+20     	; 0x133e <xQueueGiveFromISR+0x9a>
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	fc 01       	movw	r30, r24
    1330:	86 8d       	ldd	r24, Z+30	; 0x1e
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	28 2f       	mov	r18, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	fc 01       	movw	r30, r24
    133c:	26 8f       	std	Z+30, r18	; 0x1e
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <xQueueGiveFromISR+0xa2>
    1344:	19 82       	std	Y+1, r1	; 0x01
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 96       	adiw	r28, 0x08	; 8
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <xQueueGenericReceive>:
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	2f 97       	sbiw	r28, 0x0f	; 15
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	9a 87       	std	Y+10, r25	; 0x0a
    1370:	89 87       	std	Y+9, r24	; 0x09
    1372:	7c 87       	std	Y+12, r23	; 0x0c
    1374:	6b 87       	std	Y+11, r22	; 0x0b
    1376:	5e 87       	std	Y+14, r21	; 0x0e
    1378:	4d 87       	std	Y+13, r20	; 0x0d
    137a:	2f 87       	std	Y+15, r18	; 0x0f
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	9b 83       	std	Y+3, r25	; 0x03
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	0f 92       	push	r0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	9b 81       	ldd	r25, Y+3	; 0x03
    1390:	fc 01       	movw	r30, r24
    1392:	82 8d       	ldd	r24, Z+26	; 0x1a
    1394:	88 23       	and	r24, r24
    1396:	09 f4       	brne	.+2      	; 0x139a <xQueueGenericReceive+0x40>
    1398:	40 c0       	rjmp	.+128    	; 0x141a <xQueueGenericReceive+0xc0>
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	9b 81       	ldd	r25, Y+3	; 0x03
    139e:	fc 01       	movw	r30, r24
    13a0:	86 81       	ldd	r24, Z+6	; 0x06
    13a2:	97 81       	ldd	r25, Z+7	; 0x07
    13a4:	9d 83       	std	Y+5, r25	; 0x05
    13a6:	8c 83       	std	Y+4, r24	; 0x04
    13a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    13aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	9b 81       	ldd	r25, Y+3	; 0x03
    13b0:	b9 01       	movw	r22, r18
    13b2:	af d1       	rcall	.+862    	; 0x1712 <prvCopyDataFromQueue>
    13b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b6:	88 23       	and	r24, r24
    13b8:	c1 f4       	brne	.+48     	; 0x13ea <xQueueGenericReceive+0x90>
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	fc 01       	movw	r30, r24
    13c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    13c2:	2f ef       	ldi	r18, 0xFF	; 255
    13c4:	28 0f       	add	r18, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	fc 01       	movw	r30, r24
    13cc:	22 8f       	std	Z+26, r18	; 0x1a
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	9b 81       	ldd	r25, Y+3	; 0x03
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 85       	ldd	r24, Z+8	; 0x08
    13d6:	88 23       	and	r24, r24
    13d8:	e1 f0       	breq	.+56     	; 0x1412 <xQueueGenericReceive+0xb8>
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	9b 81       	ldd	r25, Y+3	; 0x03
    13de:	08 96       	adiw	r24, 0x08	; 8
    13e0:	2d d6       	rcall	.+3162   	; 0x203c <xTaskRemoveFromEventList>
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	b1 f4       	brne	.+44     	; 0x1412 <xQueueGenericReceive+0xb8>
    13e6:	90 db       	rcall	.-2272   	; 0xb08 <vPortYield>
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <xQueueGenericReceive+0xb8>
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	fc 01       	movw	r30, r24
    13f4:	37 83       	std	Z+7, r19	; 0x07
    13f6:	26 83       	std	Z+6, r18	; 0x06
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	fc 01       	movw	r30, r24
    13fe:	81 89       	ldd	r24, Z+17	; 0x11
    1400:	88 23       	and	r24, r24
    1402:	39 f0       	breq	.+14     	; 0x1412 <xQueueGenericReceive+0xb8>
    1404:	8a 81       	ldd	r24, Y+2	; 0x02
    1406:	9b 81       	ldd	r25, Y+3	; 0x03
    1408:	41 96       	adiw	r24, 0x11	; 17
    140a:	18 d6       	rcall	.+3120   	; 0x203c <xTaskRemoveFromEventList>
    140c:	88 23       	and	r24, r24
    140e:	09 f0       	breq	.+2      	; 0x1412 <xQueueGenericReceive+0xb8>
    1410:	7b db       	rcall	.-2314   	; 0xb08 <vPortYield>
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	55 c0       	rjmp	.+170    	; 0x14c4 <xQueueGenericReceive+0x16a>
    141a:	8d 85       	ldd	r24, Y+13	; 0x0d
    141c:	9e 85       	ldd	r25, Y+14	; 0x0e
    141e:	89 2b       	or	r24, r25
    1420:	21 f4       	brne	.+8      	; 0x142a <xQueueGenericReceive+0xd0>
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	4d c0       	rjmp	.+154    	; 0x14c4 <xQueueGenericReceive+0x16a>
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	88 23       	and	r24, r24
    142e:	29 f4       	brne	.+10     	; 0x143a <xQueueGenericReceive+0xe0>
    1430:	ce 01       	movw	r24, r28
    1432:	06 96       	adiw	r24, 0x06	; 6
    1434:	70 d6       	rcall	.+3296   	; 0x2116 <vTaskSetTimeOutState>
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	0f 90       	pop	r0
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	a0 d3       	rcall	.+1856   	; 0x1b80 <vTaskSuspendAll>
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	0f 92       	push	r0
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	9b 81       	ldd	r25, Y+3	; 0x03
    144a:	fc 01       	movw	r30, r24
    144c:	85 8d       	ldd	r24, Z+29	; 0x1d
    144e:	8f 3f       	cpi	r24, 0xFF	; 255
    1450:	21 f4       	brne	.+8      	; 0x145a <xQueueGenericReceive+0x100>
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	9b 81       	ldd	r25, Y+3	; 0x03
    1456:	fc 01       	movw	r30, r24
    1458:	15 8e       	std	Z+29, r1	; 0x1d
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	9b 81       	ldd	r25, Y+3	; 0x03
    145e:	fc 01       	movw	r30, r24
    1460:	86 8d       	ldd	r24, Z+30	; 0x1e
    1462:	8f 3f       	cpi	r24, 0xFF	; 255
    1464:	21 f4       	brne	.+8      	; 0x146e <xQueueGenericReceive+0x114>
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	9b 81       	ldd	r25, Y+3	; 0x03
    146a:	fc 01       	movw	r30, r24
    146c:	16 8e       	std	Z+30, r1	; 0x1e
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	9e 01       	movw	r18, r28
    1474:	23 5f       	subi	r18, 0xF3	; 243
    1476:	3f 4f       	sbci	r19, 0xFF	; 255
    1478:	ce 01       	movw	r24, r28
    147a:	06 96       	adiw	r24, 0x06	; 6
    147c:	b9 01       	movw	r22, r18
    147e:	67 d6       	rcall	.+3278   	; 0x214e <xTaskCheckForTimeOut>
    1480:	88 23       	and	r24, r24
    1482:	c9 f4       	brne	.+50     	; 0x14b6 <xQueueGenericReceive+0x15c>
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	f5 d1       	rcall	.+1002   	; 0x1874 <prvIsQueueEmpty>
    148a:	88 23       	and	r24, r24
    148c:	79 f0       	breq	.+30     	; 0x14ac <xQueueGenericReceive+0x152>
    148e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1490:	3e 85       	ldd	r19, Y+14	; 0x0e
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	41 96       	adiw	r24, 0x11	; 17
    1498:	b9 01       	movw	r22, r18
    149a:	9d d5       	rcall	.+2874   	; 0x1fd6 <vTaskPlaceOnEventList>
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	88 d1       	rcall	.+784    	; 0x17b2 <prvUnlockQueue>
    14a2:	7a d3       	rcall	.+1780   	; 0x1b98 <xTaskResumeAll>
    14a4:	88 23       	and	r24, r24
    14a6:	69 f4       	brne	.+26     	; 0x14c2 <xQueueGenericReceive+0x168>
    14a8:	2f db       	rcall	.-2466   	; 0xb08 <vPortYield>
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <xQueueGenericReceive+0x168>
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	80 d1       	rcall	.+768    	; 0x17b2 <prvUnlockQueue>
    14b2:	72 d3       	rcall	.+1764   	; 0x1b98 <xTaskResumeAll>
    14b4:	68 cf       	rjmp	.-304    	; 0x1386 <xQueueGenericReceive+0x2c>
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ba:	7b d1       	rcall	.+758    	; 0x17b2 <prvUnlockQueue>
    14bc:	6d d3       	rcall	.+1754   	; 0x1b98 <xTaskResumeAll>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <xQueueGenericReceive+0x16a>
    14c2:	61 cf       	rjmp	.-318    	; 0x1386 <xQueueGenericReceive+0x2c>
    14c4:	2f 96       	adiw	r28, 0x0f	; 15
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <xQueueReceiveFromISR>:
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	2a 97       	sbiw	r28, 0x0a	; 10
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	9e 83       	std	Y+6, r25	; 0x06
    14ec:	8d 83       	std	Y+5, r24	; 0x05
    14ee:	78 87       	std	Y+8, r23	; 0x08
    14f0:	6f 83       	std	Y+7, r22	; 0x07
    14f2:	5a 87       	std	Y+10, r21	; 0x0a
    14f4:	49 87       	std	Y+9, r20	; 0x09
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	9b 83       	std	Y+3, r25	; 0x03
    14fc:	8a 83       	std	Y+2, r24	; 0x02
    14fe:	1c 82       	std	Y+4, r1	; 0x04
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	fc 01       	movw	r30, r24
    1506:	82 8d       	ldd	r24, Z+26	; 0x1a
    1508:	88 23       	and	r24, r24
    150a:	c9 f1       	breq	.+114    	; 0x157e <xQueueReceiveFromISR+0xa8>
    150c:	2f 81       	ldd	r18, Y+7	; 0x07
    150e:	38 85       	ldd	r19, Y+8	; 0x08
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	9b 81       	ldd	r25, Y+3	; 0x03
    1514:	b9 01       	movw	r22, r18
    1516:	fd d0       	rcall	.+506    	; 0x1712 <prvCopyDataFromQueue>
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	fc 01       	movw	r30, r24
    151e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1520:	2f ef       	ldi	r18, 0xFF	; 255
    1522:	28 0f       	add	r18, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	9b 81       	ldd	r25, Y+3	; 0x03
    1528:	fc 01       	movw	r30, r24
    152a:	22 8f       	std	Z+26, r18	; 0x1a
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	9b 81       	ldd	r25, Y+3	; 0x03
    1530:	fc 01       	movw	r30, r24
    1532:	85 8d       	ldd	r24, Z+29	; 0x1d
    1534:	8f 3f       	cpi	r24, 0xFF	; 255
    1536:	b1 f4       	brne	.+44     	; 0x1564 <xQueueReceiveFromISR+0x8e>
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	fc 01       	movw	r30, r24
    153e:	80 85       	ldd	r24, Z+8	; 0x08
    1540:	88 23       	and	r24, r24
    1542:	d1 f0       	breq	.+52     	; 0x1578 <xQueueReceiveFromISR+0xa2>
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	08 96       	adiw	r24, 0x08	; 8
    154a:	78 d5       	rcall	.+2800   	; 0x203c <xTaskRemoveFromEventList>
    154c:	88 23       	and	r24, r24
    154e:	a1 f0       	breq	.+40     	; 0x1578 <xQueueReceiveFromISR+0xa2>
    1550:	89 85       	ldd	r24, Y+9	; 0x09
    1552:	9a 85       	ldd	r25, Y+10	; 0x0a
    1554:	89 2b       	or	r24, r25
    1556:	81 f0       	breq	.+32     	; 0x1578 <xQueueReceiveFromISR+0xa2>
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	fc 01       	movw	r30, r24
    1560:	20 83       	st	Z, r18
    1562:	0a c0       	rjmp	.+20     	; 0x1578 <xQueueReceiveFromISR+0xa2>
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	fc 01       	movw	r30, r24
    156a:	85 8d       	ldd	r24, Z+29	; 0x1d
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	28 2f       	mov	r18, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	9b 81       	ldd	r25, Y+3	; 0x03
    1574:	fc 01       	movw	r30, r24
    1576:	25 8f       	std	Z+29, r18	; 0x1d
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <xQueueReceiveFromISR+0xaa>
    157e:	19 82       	std	Y+1, r1	; 0x01
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	2a 96       	adiw	r28, 0x0a	; 10
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <prvCopyDataToQueue>:
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	00 d0       	rcall	.+0      	; 0x159a <prvCopyDataToQueue+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <prvCopyDataToQueue+0x8>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	9b 83       	std	Y+3, r25	; 0x03
    15a2:	8a 83       	std	Y+2, r24	; 0x02
    15a4:	7d 83       	std	Y+5, r23	; 0x05
    15a6:	6c 83       	std	Y+4, r22	; 0x04
    15a8:	4e 83       	std	Y+6, r20	; 0x06
    15aa:	19 82       	std	Y+1, r1	; 0x01
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	fc 01       	movw	r30, r24
    15b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    15b4:	88 23       	and	r24, r24
    15b6:	09 f4       	brne	.+2      	; 0x15ba <prvCopyDataToQueue+0x26>
    15b8:	98 c0       	rjmp	.+304    	; 0x16ea <prvCopyDataToQueue+0x156>
    15ba:	8e 81       	ldd	r24, Y+6	; 0x06
    15bc:	88 23       	and	r24, r24
    15be:	d9 f5       	brne	.+118    	; 0x1636 <prvCopyDataToQueue+0xa2>
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	fc 01       	movw	r30, r24
    15c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    15c8:	48 2f       	mov	r20, r24
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	fc 01       	movw	r30, r24
    15d2:	84 81       	ldd	r24, Z+4	; 0x04
    15d4:	95 81       	ldd	r25, Z+5	; 0x05
    15d6:	2c 81       	ldd	r18, Y+4	; 0x04
    15d8:	3d 81       	ldd	r19, Y+5	; 0x05
    15da:	b9 01       	movw	r22, r18
    15dc:	0e 94 dd 14 	call	0x29ba	; 0x29ba <memcpy>
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	fc 01       	movw	r30, r24
    15e6:	24 81       	ldd	r18, Z+4	; 0x04
    15e8:	35 81       	ldd	r19, Z+5	; 0x05
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	9b 81       	ldd	r25, Y+3	; 0x03
    15ee:	fc 01       	movw	r30, r24
    15f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    15f2:	88 2f       	mov	r24, r24
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	28 0f       	add	r18, r24
    15f8:	39 1f       	adc	r19, r25
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	9b 81       	ldd	r25, Y+3	; 0x03
    15fe:	fc 01       	movw	r30, r24
    1600:	35 83       	std	Z+5, r19	; 0x05
    1602:	24 83       	std	Z+4, r18	; 0x04
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	fc 01       	movw	r30, r24
    160a:	24 81       	ldd	r18, Z+4	; 0x04
    160c:	35 81       	ldd	r19, Z+5	; 0x05
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	fc 01       	movw	r30, r24
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	28 17       	cp	r18, r24
    161a:	39 07       	cpc	r19, r25
    161c:	08 f4       	brcc	.+2      	; 0x1620 <prvCopyDataToQueue+0x8c>
    161e:	65 c0       	rjmp	.+202    	; 0x16ea <prvCopyDataToQueue+0x156>
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	fc 01       	movw	r30, r24
    1626:	20 81       	ld	r18, Z
    1628:	31 81       	ldd	r19, Z+1	; 0x01
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	9b 81       	ldd	r25, Y+3	; 0x03
    162e:	fc 01       	movw	r30, r24
    1630:	35 83       	std	Z+5, r19	; 0x05
    1632:	24 83       	std	Z+4, r18	; 0x04
    1634:	5a c0       	rjmp	.+180    	; 0x16ea <prvCopyDataToQueue+0x156>
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	9b 81       	ldd	r25, Y+3	; 0x03
    163a:	fc 01       	movw	r30, r24
    163c:	84 8d       	ldd	r24, Z+28	; 0x1c
    163e:	48 2f       	mov	r20, r24
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	9b 81       	ldd	r25, Y+3	; 0x03
    1646:	fc 01       	movw	r30, r24
    1648:	86 81       	ldd	r24, Z+6	; 0x06
    164a:	97 81       	ldd	r25, Z+7	; 0x07
    164c:	2c 81       	ldd	r18, Y+4	; 0x04
    164e:	3d 81       	ldd	r19, Y+5	; 0x05
    1650:	b9 01       	movw	r22, r18
    1652:	0e 94 dd 14 	call	0x29ba	; 0x29ba <memcpy>
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	fc 01       	movw	r30, r24
    165c:	26 81       	ldd	r18, Z+6	; 0x06
    165e:	37 81       	ldd	r19, Z+7	; 0x07
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	fc 01       	movw	r30, r24
    1666:	84 8d       	ldd	r24, Z+28	; 0x1c
    1668:	88 2f       	mov	r24, r24
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	91 95       	neg	r25
    166e:	81 95       	neg	r24
    1670:	91 09       	sbc	r25, r1
    1672:	28 0f       	add	r18, r24
    1674:	39 1f       	adc	r19, r25
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	9b 81       	ldd	r25, Y+3	; 0x03
    167a:	fc 01       	movw	r30, r24
    167c:	37 83       	std	Z+7, r19	; 0x07
    167e:	26 83       	std	Z+6, r18	; 0x06
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	fc 01       	movw	r30, r24
    1686:	26 81       	ldd	r18, Z+6	; 0x06
    1688:	37 81       	ldd	r19, Z+7	; 0x07
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	fc 01       	movw	r30, r24
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	28 17       	cp	r18, r24
    1696:	39 07       	cpc	r19, r25
    1698:	a8 f4       	brcc	.+42     	; 0x16c4 <prvCopyDataToQueue+0x130>
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	9b 81       	ldd	r25, Y+3	; 0x03
    169e:	fc 01       	movw	r30, r24
    16a0:	22 81       	ldd	r18, Z+2	; 0x02
    16a2:	33 81       	ldd	r19, Z+3	; 0x03
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	9b 81       	ldd	r25, Y+3	; 0x03
    16a8:	fc 01       	movw	r30, r24
    16aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	91 95       	neg	r25
    16b2:	81 95       	neg	r24
    16b4:	91 09       	sbc	r25, r1
    16b6:	28 0f       	add	r18, r24
    16b8:	39 1f       	adc	r19, r25
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	fc 01       	movw	r30, r24
    16c0:	37 83       	std	Z+7, r19	; 0x07
    16c2:	26 83       	std	Z+6, r18	; 0x06
    16c4:	8e 81       	ldd	r24, Y+6	; 0x06
    16c6:	82 30       	cpi	r24, 0x02	; 2
    16c8:	81 f4       	brne	.+32     	; 0x16ea <prvCopyDataToQueue+0x156>
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	fc 01       	movw	r30, r24
    16d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    16d2:	88 23       	and	r24, r24
    16d4:	51 f0       	breq	.+20     	; 0x16ea <prvCopyDataToQueue+0x156>
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	9b 81       	ldd	r25, Y+3	; 0x03
    16da:	fc 01       	movw	r30, r24
    16dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    16de:	2f ef       	ldi	r18, 0xFF	; 255
    16e0:	28 0f       	add	r18, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	9b 81       	ldd	r25, Y+3	; 0x03
    16e6:	fc 01       	movw	r30, r24
    16e8:	22 8f       	std	Z+26, r18	; 0x1a
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	fc 01       	movw	r30, r24
    16f0:	82 8d       	ldd	r24, Z+26	; 0x1a
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	28 0f       	add	r18, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	fc 01       	movw	r30, r24
    16fc:	22 8f       	std	Z+26, r18	; 0x1a
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	26 96       	adiw	r28, 0x06	; 6
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	08 95       	ret

00001712 <prvCopyDataFromQueue>:
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	00 d0       	rcall	.+0      	; 0x1718 <prvCopyDataFromQueue+0x6>
    1718:	1f 92       	push	r1
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	7c 83       	std	Y+4, r23	; 0x04
    1724:	6b 83       	std	Y+3, r22	; 0x03
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	fc 01       	movw	r30, r24
    172c:	84 8d       	ldd	r24, Z+28	; 0x1c
    172e:	88 23       	and	r24, r24
    1730:	c9 f1       	breq	.+114    	; 0x17a4 <prvCopyDataFromQueue+0x92>
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	fc 01       	movw	r30, r24
    1738:	26 81       	ldd	r18, Z+6	; 0x06
    173a:	37 81       	ldd	r19, Z+7	; 0x07
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	9a 81       	ldd	r25, Y+2	; 0x02
    1740:	fc 01       	movw	r30, r24
    1742:	84 8d       	ldd	r24, Z+28	; 0x1c
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	28 0f       	add	r18, r24
    174a:	39 1f       	adc	r19, r25
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	fc 01       	movw	r30, r24
    1752:	37 83       	std	Z+7, r19	; 0x07
    1754:	26 83       	std	Z+6, r18	; 0x06
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	9a 81       	ldd	r25, Y+2	; 0x02
    175a:	fc 01       	movw	r30, r24
    175c:	26 81       	ldd	r18, Z+6	; 0x06
    175e:	37 81       	ldd	r19, Z+7	; 0x07
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	fc 01       	movw	r30, r24
    1766:	82 81       	ldd	r24, Z+2	; 0x02
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	50 f0       	brcs	.+20     	; 0x1784 <prvCopyDataFromQueue+0x72>
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	fc 01       	movw	r30, r24
    1776:	20 81       	ld	r18, Z
    1778:	31 81       	ldd	r19, Z+1	; 0x01
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	fc 01       	movw	r30, r24
    1780:	37 83       	std	Z+7, r19	; 0x07
    1782:	26 83       	std	Z+6, r18	; 0x06
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	9a 81       	ldd	r25, Y+2	; 0x02
    1788:	fc 01       	movw	r30, r24
    178a:	84 8d       	ldd	r24, Z+28	; 0x1c
    178c:	48 2f       	mov	r20, r24
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	9a 81       	ldd	r25, Y+2	; 0x02
    1794:	fc 01       	movw	r30, r24
    1796:	26 81       	ldd	r18, Z+6	; 0x06
    1798:	37 81       	ldd	r19, Z+7	; 0x07
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	b9 01       	movw	r22, r18
    17a0:	0e 94 dd 14 	call	0x29ba	; 0x29ba <memcpy>
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	08 95       	ret

000017b2 <prvUnlockQueue>:
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	1f 92       	push	r1
    17b8:	1f 92       	push	r1
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	0f 92       	push	r0
    17c8:	19 c0       	rjmp	.+50     	; 0x17fc <prvUnlockQueue+0x4a>
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	fc 01       	movw	r30, r24
    17d0:	81 89       	ldd	r24, Z+17	; 0x11
    17d2:	88 23       	and	r24, r24
    17d4:	41 f0       	breq	.+16     	; 0x17e6 <prvUnlockQueue+0x34>
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	41 96       	adiw	r24, 0x11	; 17
    17dc:	2f d4       	rcall	.+2142   	; 0x203c <xTaskRemoveFromEventList>
    17de:	88 23       	and	r24, r24
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <prvUnlockQueue+0x36>
    17e2:	1c d5       	rcall	.+2616   	; 0x221c <vTaskMissedYield>
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <prvUnlockQueue+0x36>
    17e6:	10 c0       	rjmp	.+32     	; 0x1808 <prvUnlockQueue+0x56>
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	fc 01       	movw	r30, r24
    17ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    17f0:	81 50       	subi	r24, 0x01	; 1
    17f2:	28 2f       	mov	r18, r24
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	9a 81       	ldd	r25, Y+2	; 0x02
    17f8:	fc 01       	movw	r30, r24
    17fa:	26 8f       	std	Z+30, r18	; 0x1e
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	fc 01       	movw	r30, r24
    1802:	86 8d       	ldd	r24, Z+30	; 0x1e
    1804:	18 16       	cp	r1, r24
    1806:	0c f3       	brlt	.-62     	; 0x17ca <prvUnlockQueue+0x18>
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	2f ef       	ldi	r18, 0xFF	; 255
    180e:	fc 01       	movw	r30, r24
    1810:	26 8f       	std	Z+30, r18	; 0x1e
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	0f 92       	push	r0
    181c:	19 c0       	rjmp	.+50     	; 0x1850 <prvUnlockQueue+0x9e>
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	fc 01       	movw	r30, r24
    1824:	80 85       	ldd	r24, Z+8	; 0x08
    1826:	88 23       	and	r24, r24
    1828:	91 f0       	breq	.+36     	; 0x184e <prvUnlockQueue+0x9c>
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	08 96       	adiw	r24, 0x08	; 8
    1830:	05 d4       	rcall	.+2058   	; 0x203c <xTaskRemoveFromEventList>
    1832:	88 23       	and	r24, r24
    1834:	09 f0       	breq	.+2      	; 0x1838 <prvUnlockQueue+0x86>
    1836:	f2 d4       	rcall	.+2532   	; 0x221c <vTaskMissedYield>
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	fc 01       	movw	r30, r24
    183e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1840:	81 50       	subi	r24, 0x01	; 1
    1842:	28 2f       	mov	r18, r24
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	fc 01       	movw	r30, r24
    184a:	25 8f       	std	Z+29, r18	; 0x1d
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <prvUnlockQueue+0x9e>
    184e:	06 c0       	rjmp	.+12     	; 0x185c <prvUnlockQueue+0xaa>
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	fc 01       	movw	r30, r24
    1856:	85 8d       	ldd	r24, Z+29	; 0x1d
    1858:	18 16       	cp	r1, r24
    185a:	0c f3       	brlt	.-62     	; 0x181e <prvUnlockQueue+0x6c>
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	2f ef       	ldi	r18, 0xFF	; 255
    1862:	fc 01       	movw	r30, r24
    1864:	25 8f       	std	Z+29, r18	; 0x1d
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <prvIsQueueEmpty>:
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	00 d0       	rcall	.+0      	; 0x187a <prvIsQueueEmpty+0x6>
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	9b 83       	std	Y+3, r25	; 0x03
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	0f 92       	push	r0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	fc 01       	movw	r30, r24
    188e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1890:	88 23       	and	r24, r24
    1892:	19 f4       	brne	.+6      	; 0x189a <prvIsQueueEmpty+0x26>
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	01 c0       	rjmp	.+2      	; 0x189c <prvIsQueueEmpty+0x28>
    189a:	19 82       	std	Y+1, r1	; 0x01
    189c:	0f 90       	pop	r0
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <prvIsQueueFull+0x6>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	9b 83       	std	Y+3, r25	; 0x03
    18ba:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	fc 01       	movw	r30, r24
    18c8:	22 8d       	ldd	r18, Z+26	; 0x1a
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	fc 01       	movw	r30, r24
    18d0:	83 8d       	ldd	r24, Z+27	; 0x1b
    18d2:	28 17       	cp	r18, r24
    18d4:	19 f4       	brne	.+6      	; 0x18dc <prvIsQueueFull+0x2e>
		{
			xReturn = pdTRUE;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	89 83       	std	Y+1, r24	; 0x01
    18da:	01 c0       	rjmp	.+2      	; 0x18de <prvIsQueueFull+0x30>
		}
		else
		{
			xReturn = pdFALSE;
    18dc:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    18de:	0f 90       	pop	r0
    18e0:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <xTaskGenericCreate>:
    18f0:	af 92       	push	r10
    18f2:	bf 92       	push	r11
    18f4:	cf 92       	push	r12
    18f6:	df 92       	push	r13
    18f8:	ef 92       	push	r14
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	64 97       	sbiw	r28, 0x14	; 20
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	9f 83       	std	Y+7, r25	; 0x07
    1916:	8e 83       	std	Y+6, r24	; 0x06
    1918:	79 87       	std	Y+9, r23	; 0x09
    191a:	68 87       	std	Y+8, r22	; 0x08
    191c:	5b 87       	std	Y+11, r21	; 0x0b
    191e:	4a 87       	std	Y+10, r20	; 0x0a
    1920:	3d 87       	std	Y+13, r19	; 0x0d
    1922:	2c 87       	std	Y+12, r18	; 0x0c
    1924:	0e 87       	std	Y+14, r16	; 0x0e
    1926:	f8 8a       	std	Y+16, r15	; 0x10
    1928:	ef 86       	std	Y+15, r14	; 0x0f
    192a:	da 8a       	std	Y+18, r13	; 0x12
    192c:	c9 8a       	std	Y+17, r12	; 0x11
    192e:	bc 8a       	std	Y+20, r11	; 0x14
    1930:	ab 8a       	std	Y+19, r10	; 0x13
    1932:	29 89       	ldd	r18, Y+17	; 0x11
    1934:	3a 89       	ldd	r19, Y+18	; 0x12
    1936:	8a 85       	ldd	r24, Y+10	; 0x0a
    1938:	9b 85       	ldd	r25, Y+11	; 0x0b
    193a:	b9 01       	movw	r22, r18
    193c:	c1 d5       	rcall	.+2946   	; 0x24c0 <prvAllocateTCBAndStack>
    193e:	9b 83       	std	Y+3, r25	; 0x03
    1940:	8a 83       	std	Y+2, r24	; 0x02
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	89 2b       	or	r24, r25
    1948:	09 f4       	brne	.+2      	; 0x194c <xTaskGenericCreate+0x5c>
    194a:	8f c0       	rjmp	.+286    	; 0x1a6a <xTaskGenericCreate+0x17a>
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	9b 81       	ldd	r25, Y+3	; 0x03
    1950:	fc 01       	movw	r30, r24
    1952:	27 89       	ldd	r18, Z+23	; 0x17
    1954:	30 8d       	ldd	r19, Z+24	; 0x18
    1956:	8a 85       	ldd	r24, Y+10	; 0x0a
    1958:	9b 85       	ldd	r25, Y+11	; 0x0b
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	82 0f       	add	r24, r18
    195e:	93 1f       	adc	r25, r19
    1960:	9d 83       	std	Y+5, r25	; 0x05
    1962:	8c 83       	std	Y+4, r24	; 0x04
    1964:	4a 85       	ldd	r20, Y+10	; 0x0a
    1966:	5b 85       	ldd	r21, Y+11	; 0x0b
    1968:	2b 89       	ldd	r18, Y+19	; 0x13
    196a:	3c 89       	ldd	r19, Y+20	; 0x14
    196c:	68 85       	ldd	r22, Y+8	; 0x08
    196e:	79 85       	ldd	r23, Y+9	; 0x09
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	9b 81       	ldd	r25, Y+3	; 0x03
    1974:	8a 01       	movw	r16, r20
    1976:	4e 85       	ldd	r20, Y+14	; 0x0e
    1978:	5b d4       	rcall	.+2230   	; 0x2230 <prvInitialiseTCBVariables>
    197a:	4c 85       	ldd	r20, Y+12	; 0x0c
    197c:	5d 85       	ldd	r21, Y+13	; 0x0d
    197e:	2e 81       	ldd	r18, Y+6	; 0x06
    1980:	3f 81       	ldd	r19, Y+7	; 0x07
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	9d 81       	ldd	r25, Y+5	; 0x05
    1986:	b9 01       	movw	r22, r18
    1988:	0e 94 88 03 	call	0x710	; 0x710 <pxPortInitialiseStack>
    198c:	9c 01       	movw	r18, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	9b 81       	ldd	r25, Y+3	; 0x03
    1992:	fc 01       	movw	r30, r24
    1994:	31 83       	std	Z+1, r19	; 0x01
    1996:	20 83       	st	Z, r18
    1998:	8f 85       	ldd	r24, Y+15	; 0x0f
    199a:	98 89       	ldd	r25, Y+16	; 0x10
    199c:	89 2b       	or	r24, r25
    199e:	39 f0       	breq	.+14     	; 0x19ae <xTaskGenericCreate+0xbe>
    19a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a2:	98 89       	ldd	r25, Y+16	; 0x10
    19a4:	2a 81       	ldd	r18, Y+2	; 0x02
    19a6:	3b 81       	ldd	r19, Y+3	; 0x03
    19a8:	fc 01       	movw	r30, r24
    19aa:	31 83       	std	Z+1, r19	; 0x01
    19ac:	20 83       	st	Z, r18
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	0f 92       	push	r0
    19b4:	80 91 47 0e 	lds	r24, 0x0E47
    19b8:	8f 5f       	subi	r24, 0xFF	; 255
    19ba:	80 93 47 0e 	sts	0x0E47, r24
    19be:	80 91 f8 0d 	lds	r24, 0x0DF8
    19c2:	90 91 f9 0d 	lds	r25, 0x0DF9
    19c6:	89 2b       	or	r24, r25
    19c8:	61 f4       	brne	.+24     	; 0x19e2 <xTaskGenericCreate+0xf2>
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	90 93 f9 0d 	sts	0x0DF9, r25
    19d2:	80 93 f8 0d 	sts	0x0DF8, r24
    19d6:	80 91 47 0e 	lds	r24, 0x0E47
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	a9 f4       	brne	.+42     	; 0x1a08 <xTaskGenericCreate+0x118>
    19de:	ac d4       	rcall	.+2392   	; 0x2338 <prvInitialiseTaskLists>
    19e0:	13 c0       	rjmp	.+38     	; 0x1a08 <xTaskGenericCreate+0x118>
    19e2:	80 91 4b 0e 	lds	r24, 0x0E4B
    19e6:	88 23       	and	r24, r24
    19e8:	79 f4       	brne	.+30     	; 0x1a08 <xTaskGenericCreate+0x118>
    19ea:	80 91 f8 0d 	lds	r24, 0x0DF8
    19ee:	90 91 f9 0d 	lds	r25, 0x0DF9
    19f2:	fc 01       	movw	r30, r24
    19f4:	96 89       	ldd	r25, Z+22	; 0x16
    19f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19f8:	89 17       	cp	r24, r25
    19fa:	30 f0       	brcs	.+12     	; 0x1a08 <xTaskGenericCreate+0x118>
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	90 93 f9 0d 	sts	0x0DF9, r25
    1a04:	80 93 f8 0d 	sts	0x0DF8, r24
    1a08:	80 91 4f 0e 	lds	r24, 0x0E4F
    1a0c:	8f 5f       	subi	r24, 0xFF	; 255
    1a0e:	80 93 4f 0e 	sts	0x0E4F, r24
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	fc 01       	movw	r30, r24
    1a18:	96 89       	ldd	r25, Z+22	; 0x16
    1a1a:	80 91 4a 0e 	lds	r24, 0x0E4A
    1a1e:	89 17       	cp	r24, r25
    1a20:	30 f4       	brcc	.+12     	; 0x1a2e <xTaskGenericCreate+0x13e>
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	fc 01       	movw	r30, r24
    1a28:	86 89       	ldd	r24, Z+22	; 0x16
    1a2a:	80 93 4a 0e 	sts	0x0E4A, r24
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	ac 01       	movw	r20, r24
    1a34:	4e 5f       	subi	r20, 0xFE	; 254
    1a36:	5f 4f       	sbci	r21, 0xFF	; 255
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	86 89       	ldd	r24, Z+22	; 0x16
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	c9 01       	movw	r24, r18
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	86 50       	subi	r24, 0x06	; 6
    1a58:	92 4f       	sbci	r25, 0xF2	; 242
    1a5a:	ba 01       	movw	r22, r20
    1a5c:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	0f 90       	pop	r0
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <xTaskGenericCreate+0x17e>
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	71 f4       	brne	.+28     	; 0x1a90 <xTaskGenericCreate+0x1a0>
    1a74:	80 91 4b 0e 	lds	r24, 0x0E4B
    1a78:	88 23       	and	r24, r24
    1a7a:	51 f0       	breq	.+20     	; 0x1a90 <xTaskGenericCreate+0x1a0>
    1a7c:	80 91 f8 0d 	lds	r24, 0x0DF8
    1a80:	90 91 f9 0d 	lds	r25, 0x0DF9
    1a84:	fc 01       	movw	r30, r24
    1a86:	96 89       	ldd	r25, Z+22	; 0x16
    1a88:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a8a:	98 17       	cp	r25, r24
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <xTaskGenericCreate+0x1a0>
    1a8e:	3c d8       	rcall	.-3976   	; 0xb08 <vPortYield>
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	64 96       	adiw	r28, 0x14	; 20
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
    1aae:	bf 90       	pop	r11
    1ab0:	af 90       	pop	r10
    1ab2:	08 95       	ret

00001ab4 <vTaskDelay>:
    1ab4:	cf 93       	push	r28
    1ab6:	df 93       	push	r29
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <vTaskDelay+0x6>
    1aba:	1f 92       	push	r1
    1abc:	1f 92       	push	r1
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	9d 83       	std	Y+5, r25	; 0x05
    1ac4:	8c 83       	std	Y+4, r24	; 0x04
    1ac6:	19 82       	std	Y+1, r1	; 0x01
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	89 2b       	or	r24, r25
    1ace:	b9 f0       	breq	.+46     	; 0x1afe <vTaskDelay+0x4a>
    1ad0:	57 d0       	rcall	.+174    	; 0x1b80 <vTaskSuspendAll>
    1ad2:	20 91 48 0e 	lds	r18, 0x0E48
    1ad6:	30 91 49 0e 	lds	r19, 0x0E49
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	82 0f       	add	r24, r18
    1ae0:	93 1f       	adc	r25, r19
    1ae2:	9b 83       	std	Y+3, r25	; 0x03
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	80 91 f8 0d 	lds	r24, 0x0DF8
    1aea:	90 91 f9 0d 	lds	r25, 0x0DF9
    1aee:	02 96       	adiw	r24, 0x02	; 2
    1af0:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	9b 81       	ldd	r25, Y+3	; 0x03
    1af8:	98 d4       	rcall	.+2352   	; 0x242a <prvAddCurrentTaskToDelayedList>
    1afa:	4e d0       	rcall	.+156    	; 0x1b98 <xTaskResumeAll>
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	88 23       	and	r24, r24
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <vTaskDelay+0x52>
    1b04:	01 d8       	rcall	.-4094   	; 0xb08 <vPortYield>
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	08 95       	ret

00001b16 <vTaskStartScheduler>:
    1b16:	af 92       	push	r10
    1b18:	bf 92       	push	r11
    1b1a:	cf 92       	push	r12
    1b1c:	df 92       	push	r13
    1b1e:	ef 92       	push	r14
    1b20:	ff 92       	push	r15
    1b22:	0f 93       	push	r16
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	1f 92       	push	r1
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	a1 2c       	mov	r10, r1
    1b30:	b1 2c       	mov	r11, r1
    1b32:	c1 2c       	mov	r12, r1
    1b34:	d1 2c       	mov	r13, r1
    1b36:	e1 2c       	mov	r14, r1
    1b38:	f1 2c       	mov	r15, r1
    1b3a:	00 e0       	ldi	r16, 0x00	; 0
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	49 eb       	ldi	r20, 0xB9	; 185
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	72 e0       	ldi	r23, 0x02	; 2
    1b48:	82 e7       	ldi	r24, 0x72	; 114
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	d1 de       	rcall	.-606    	; 0x18f0 <xTaskGenericCreate>
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	51 f4       	brne	.+20     	; 0x1b6a <vTaskStartScheduler+0x54>
    1b56:	f8 94       	cli
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	80 93 4b 0e 	sts	0x0E4B, r24
    1b5e:	10 92 49 0e 	sts	0x0E49, r1
    1b62:	10 92 48 0e 	sts	0x0E48, r1
    1b66:	0e 94 4c 05 	call	0xa98	; 0xa98 <xPortStartScheduler>
    1b6a:	0f 90       	pop	r0
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	cf 90       	pop	r12
    1b7a:	bf 90       	pop	r11
    1b7c:	af 90       	pop	r10
    1b7e:	08 95       	ret

00001b80 <vTaskSuspendAll>:
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	80 91 50 0e 	lds	r24, 0x0E50
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 50 0e 	sts	0x0E50, r24
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	08 95       	ret

00001b98 <xTaskResumeAll>:
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <xTaskResumeAll+0x6>
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
    1ba2:	19 82       	std	Y+1, r1	; 0x01
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	0f 92       	push	r0
    1baa:	80 91 50 0e 	lds	r24, 0x0E50
    1bae:	81 50       	subi	r24, 0x01	; 1
    1bb0:	80 93 50 0e 	sts	0x0E50, r24
    1bb4:	80 91 50 0e 	lds	r24, 0x0E50
    1bb8:	88 23       	and	r24, r24
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <xTaskResumeAll+0x26>
    1bbc:	70 c0       	rjmp	.+224    	; 0x1c9e <xTaskResumeAll+0x106>
    1bbe:	80 91 47 0e 	lds	r24, 0x0E47
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <xTaskResumeAll+0x30>
    1bc6:	6b c0       	rjmp	.+214    	; 0x1c9e <xTaskResumeAll+0x106>
    1bc8:	49 c0       	rjmp	.+146    	; 0x1c5c <xTaskResumeAll+0xc4>
    1bca:	80 91 39 0e 	lds	r24, 0x0E39
    1bce:	90 91 3a 0e 	lds	r25, 0x0E3A
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	86 81       	ldd	r24, Z+6	; 0x06
    1bd6:	97 81       	ldd	r25, Z+7	; 0x07
    1bd8:	9b 83       	std	Y+3, r25	; 0x03
    1bda:	8a 83       	std	Y+2, r24	; 0x02
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	0c 96       	adiw	r24, 0x0c	; 12
    1be2:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	02 96       	adiw	r24, 0x02	; 2
    1bec:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	96 89       	ldd	r25, Z+22	; 0x16
    1bf8:	80 91 4a 0e 	lds	r24, 0x0E4A
    1bfc:	89 17       	cp	r24, r25
    1bfe:	30 f4       	brcc	.+12     	; 0x1c0c <xTaskResumeAll+0x74>
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	9b 81       	ldd	r25, Y+3	; 0x03
    1c04:	fc 01       	movw	r30, r24
    1c06:	86 89       	ldd	r24, Z+22	; 0x16
    1c08:	80 93 4a 0e 	sts	0x0E4A, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c10:	ac 01       	movw	r20, r24
    1c12:	4e 5f       	subi	r20, 0xFE	; 254
    1c14:	5f 4f       	sbci	r21, 0xFF	; 255
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	86 89       	ldd	r24, Z+22	; 0x16
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	c9 01       	movw	r24, r18
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	82 0f       	add	r24, r18
    1c32:	93 1f       	adc	r25, r19
    1c34:	86 50       	subi	r24, 0x06	; 6
    1c36:	92 4f       	sbci	r25, 0xF2	; 242
    1c38:	ba 01       	movw	r22, r20
    1c3a:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	fc 01       	movw	r30, r24
    1c44:	26 89       	ldd	r18, Z+22	; 0x16
    1c46:	80 91 f8 0d 	lds	r24, 0x0DF8
    1c4a:	90 91 f9 0d 	lds	r25, 0x0DF9
    1c4e:	fc 01       	movw	r30, r24
    1c50:	86 89       	ldd	r24, Z+22	; 0x16
    1c52:	28 17       	cp	r18, r24
    1c54:	18 f0       	brcs	.+6      	; 0x1c5c <xTaskResumeAll+0xc4>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 4d 0e 	sts	0x0E4D, r24
    1c5c:	80 91 34 0e 	lds	r24, 0x0E34
    1c60:	88 23       	and	r24, r24
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <xTaskResumeAll+0xce>
    1c64:	b2 cf       	rjmp	.-156    	; 0x1bca <xTaskResumeAll+0x32>
    1c66:	80 91 4c 0e 	lds	r24, 0x0E4C
    1c6a:	88 23       	and	r24, r24
    1c6c:	81 f0       	breq	.+32     	; 0x1c8e <xTaskResumeAll+0xf6>
    1c6e:	0b c0       	rjmp	.+22     	; 0x1c86 <xTaskResumeAll+0xee>
    1c70:	37 d0       	rcall	.+110    	; 0x1ce0 <xTaskIncrementTick>
    1c72:	88 23       	and	r24, r24
    1c74:	19 f0       	breq	.+6      	; 0x1c7c <xTaskResumeAll+0xe4>
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	80 93 4d 0e 	sts	0x0E4D, r24
    1c7c:	80 91 4c 0e 	lds	r24, 0x0E4C
    1c80:	81 50       	subi	r24, 0x01	; 1
    1c82:	80 93 4c 0e 	sts	0x0E4C, r24
    1c86:	80 91 4c 0e 	lds	r24, 0x0E4C
    1c8a:	88 23       	and	r24, r24
    1c8c:	89 f7       	brne	.-30     	; 0x1c70 <xTaskResumeAll+0xd8>
    1c8e:	80 91 4d 0e 	lds	r24, 0x0E4D
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <xTaskResumeAll+0x106>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	0e 94 84 05 	call	0xb08	; 0xb08 <vPortYield>
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <xTaskGetTickCount>:
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	1f 92       	push	r1
    1cb6:	1f 92       	push	r1
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	0f 92       	push	r0
    1cc2:	80 91 48 0e 	lds	r24, 0x0E48
    1cc6:	90 91 49 0e 	lds	r25, 0x0E49
    1cca:	9a 83       	std	Y+2, r25	; 0x02
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	08 95       	ret

00001ce0 <xTaskIncrementTick>:
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	29 97       	sbiw	r28, 0x09	; 9
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	19 82       	std	Y+1, r1	; 0x01
    1cf6:	80 91 50 0e 	lds	r24, 0x0E50
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <xTaskIncrementTick+0x20>
    1cfe:	c8 c0       	rjmp	.+400    	; 0x1e90 <xTaskIncrementTick+0x1b0>
    1d00:	80 91 48 0e 	lds	r24, 0x0E48
    1d04:	90 91 49 0e 	lds	r25, 0x0E49
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	90 93 49 0e 	sts	0x0E49, r25
    1d0e:	80 93 48 0e 	sts	0x0E48, r24
    1d12:	80 91 48 0e 	lds	r24, 0x0E48
    1d16:	90 91 49 0e 	lds	r25, 0x0E49
    1d1a:	9b 83       	std	Y+3, r25	; 0x03
    1d1c:	8a 83       	std	Y+2, r24	; 0x02
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	89 2b       	or	r24, r25
    1d24:	d1 f4       	brne	.+52     	; 0x1d5a <xTaskIncrementTick+0x7a>
    1d26:	80 91 30 0e 	lds	r24, 0x0E30
    1d2a:	90 91 31 0e 	lds	r25, 0x0E31
    1d2e:	9d 83       	std	Y+5, r25	; 0x05
    1d30:	8c 83       	std	Y+4, r24	; 0x04
    1d32:	80 91 32 0e 	lds	r24, 0x0E32
    1d36:	90 91 33 0e 	lds	r25, 0x0E33
    1d3a:	90 93 31 0e 	sts	0x0E31, r25
    1d3e:	80 93 30 0e 	sts	0x0E30, r24
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	90 93 33 0e 	sts	0x0E33, r25
    1d4a:	80 93 32 0e 	sts	0x0E32, r24
    1d4e:	80 91 4e 0e 	lds	r24, 0x0E4E
    1d52:	8f 5f       	subi	r24, 0xFF	; 255
    1d54:	80 93 4e 0e 	sts	0x0E4E, r24
    1d58:	0e d4       	rcall	.+2076   	; 0x2576 <prvResetNextTaskUnblockTime>
    1d5a:	80 91 00 02 	lds	r24, 0x0200
    1d5e:	90 91 01 02 	lds	r25, 0x0201
    1d62:	2a 81       	ldd	r18, Y+2	; 0x02
    1d64:	3b 81       	ldd	r19, Y+3	; 0x03
    1d66:	28 17       	cp	r18, r24
    1d68:	39 07       	cpc	r19, r25
    1d6a:	08 f4       	brcc	.+2      	; 0x1d6e <xTaskIncrementTick+0x8e>
    1d6c:	77 c0       	rjmp	.+238    	; 0x1e5c <xTaskIncrementTick+0x17c>
    1d6e:	80 91 30 0e 	lds	r24, 0x0E30
    1d72:	90 91 31 0e 	lds	r25, 0x0E31
    1d76:	fc 01       	movw	r30, r24
    1d78:	80 81       	ld	r24, Z
    1d7a:	88 23       	and	r24, r24
    1d7c:	39 f4       	brne	.+14     	; 0x1d8c <xTaskIncrementTick+0xac>
    1d7e:	8f ef       	ldi	r24, 0xFF	; 255
    1d80:	9f ef       	ldi	r25, 0xFF	; 255
    1d82:	90 93 01 02 	sts	0x0201, r25
    1d86:	80 93 00 02 	sts	0x0200, r24
    1d8a:	68 c0       	rjmp	.+208    	; 0x1e5c <xTaskIncrementTick+0x17c>
    1d8c:	80 91 30 0e 	lds	r24, 0x0E30
    1d90:	90 91 31 0e 	lds	r25, 0x0E31
    1d94:	fc 01       	movw	r30, r24
    1d96:	85 81       	ldd	r24, Z+5	; 0x05
    1d98:	96 81       	ldd	r25, Z+6	; 0x06
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	86 81       	ldd	r24, Z+6	; 0x06
    1d9e:	97 81       	ldd	r25, Z+7	; 0x07
    1da0:	9f 83       	std	Y+7, r25	; 0x07
    1da2:	8e 83       	std	Y+6, r24	; 0x06
    1da4:	8e 81       	ldd	r24, Y+6	; 0x06
    1da6:	9f 81       	ldd	r25, Y+7	; 0x07
    1da8:	fc 01       	movw	r30, r24
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	99 87       	std	Y+9, r25	; 0x09
    1db0:	88 87       	std	Y+8, r24	; 0x08
    1db2:	2a 81       	ldd	r18, Y+2	; 0x02
    1db4:	3b 81       	ldd	r19, Y+3	; 0x03
    1db6:	88 85       	ldd	r24, Y+8	; 0x08
    1db8:	99 85       	ldd	r25, Y+9	; 0x09
    1dba:	28 17       	cp	r18, r24
    1dbc:	39 07       	cpc	r19, r25
    1dbe:	38 f4       	brcc	.+14     	; 0x1dce <xTaskIncrementTick+0xee>
    1dc0:	88 85       	ldd	r24, Y+8	; 0x08
    1dc2:	99 85       	ldd	r25, Y+9	; 0x09
    1dc4:	90 93 01 02 	sts	0x0201, r25
    1dc8:	80 93 00 02 	sts	0x0200, r24
    1dcc:	47 c0       	rjmp	.+142    	; 0x1e5c <xTaskIncrementTick+0x17c>
    1dce:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd2:	02 96       	adiw	r24, 0x02	; 2
    1dd4:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	9f 81       	ldd	r25, Y+7	; 0x07
    1ddc:	fc 01       	movw	r30, r24
    1dde:	84 89       	ldd	r24, Z+20	; 0x14
    1de0:	95 89       	ldd	r25, Z+21	; 0x15
    1de2:	89 2b       	or	r24, r25
    1de4:	29 f0       	breq	.+10     	; 0x1df0 <xTaskIncrementTick+0x110>
    1de6:	8e 81       	ldd	r24, Y+6	; 0x06
    1de8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dea:	0c 96       	adiw	r24, 0x0c	; 12
    1dec:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	9f 81       	ldd	r25, Y+7	; 0x07
    1df4:	fc 01       	movw	r30, r24
    1df6:	96 89       	ldd	r25, Z+22	; 0x16
    1df8:	80 91 4a 0e 	lds	r24, 0x0E4A
    1dfc:	89 17       	cp	r24, r25
    1dfe:	30 f4       	brcc	.+12     	; 0x1e0c <xTaskIncrementTick+0x12c>
    1e00:	8e 81       	ldd	r24, Y+6	; 0x06
    1e02:	9f 81       	ldd	r25, Y+7	; 0x07
    1e04:	fc 01       	movw	r30, r24
    1e06:	86 89       	ldd	r24, Z+22	; 0x16
    1e08:	80 93 4a 0e 	sts	0x0E4A, r24
    1e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e10:	ac 01       	movw	r20, r24
    1e12:	4e 5f       	subi	r20, 0xFE	; 254
    1e14:	5f 4f       	sbci	r21, 0xFF	; 255
    1e16:	8e 81       	ldd	r24, Y+6	; 0x06
    1e18:	9f 81       	ldd	r25, Y+7	; 0x07
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	86 89       	ldd	r24, Z+22	; 0x16
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	c9 01       	movw	r24, r18
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	82 0f       	add	r24, r18
    1e32:	93 1f       	adc	r25, r19
    1e34:	86 50       	subi	r24, 0x06	; 6
    1e36:	92 4f       	sbci	r25, 0xF2	; 242
    1e38:	ba 01       	movw	r22, r20
    1e3a:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
    1e3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e40:	9f 81       	ldd	r25, Y+7	; 0x07
    1e42:	fc 01       	movw	r30, r24
    1e44:	26 89       	ldd	r18, Z+22	; 0x16
    1e46:	80 91 f8 0d 	lds	r24, 0x0DF8
    1e4a:	90 91 f9 0d 	lds	r25, 0x0DF9
    1e4e:	fc 01       	movw	r30, r24
    1e50:	86 89       	ldd	r24, Z+22	; 0x16
    1e52:	28 17       	cp	r18, r24
    1e54:	10 f0       	brcs	.+4      	; 0x1e5a <xTaskIncrementTick+0x17a>
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	89 cf       	rjmp	.-238    	; 0x1d6e <xTaskIncrementTick+0x8e>
    1e5c:	80 91 f8 0d 	lds	r24, 0x0DF8
    1e60:	90 91 f9 0d 	lds	r25, 0x0DF9
    1e64:	fc 01       	movw	r30, r24
    1e66:	86 89       	ldd	r24, Z+22	; 0x16
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	c9 01       	movw	r24, r18
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	86 50       	subi	r24, 0x06	; 6
    1e80:	92 4f       	sbci	r25, 0xF2	; 242
    1e82:	fc 01       	movw	r30, r24
    1e84:	80 81       	ld	r24, Z
    1e86:	82 30       	cpi	r24, 0x02	; 2
    1e88:	40 f0       	brcs	.+16     	; 0x1e9a <xTaskIncrementTick+0x1ba>
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	89 83       	std	Y+1, r24	; 0x01
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <xTaskIncrementTick+0x1ba>
    1e90:	80 91 4c 0e 	lds	r24, 0x0E4C
    1e94:	8f 5f       	subi	r24, 0xFF	; 255
    1e96:	80 93 4c 0e 	sts	0x0E4C, r24
    1e9a:	80 91 4d 0e 	lds	r24, 0x0E4D
    1e9e:	88 23       	and	r24, r24
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <xTaskIncrementTick+0x1c6>
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	89 81       	ldd	r24, Y+1	; 0x01
    1ea8:	29 96       	adiw	r28, 0x09	; 9
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	08 95       	ret

00001eba <vTaskSwitchContext>:
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	1f 92       	push	r1
    1ec0:	1f 92       	push	r1
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	80 91 50 0e 	lds	r24, 0x0E50
    1eca:	88 23       	and	r24, r24
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <vTaskSwitchContext+0x1c>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	80 93 4d 0e 	sts	0x0E4D, r24
    1ed4:	7b c0       	rjmp	.+246    	; 0x1fcc <vTaskSwitchContext+0x112>
    1ed6:	10 92 4d 0e 	sts	0x0E4D, r1
    1eda:	80 91 f8 0d 	lds	r24, 0x0DF8
    1ede:	90 91 f9 0d 	lds	r25, 0x0DF9
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 81       	ld	r18, Z
    1ee6:	31 81       	ldd	r19, Z+1	; 0x01
    1ee8:	80 91 f8 0d 	lds	r24, 0x0DF8
    1eec:	90 91 f9 0d 	lds	r25, 0x0DF9
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	87 89       	ldd	r24, Z+23	; 0x17
    1ef4:	90 8d       	ldd	r25, Z+24	; 0x18
    1ef6:	82 17       	cp	r24, r18
    1ef8:	93 07       	cpc	r25, r19
    1efa:	68 f0       	brcs	.+26     	; 0x1f16 <vTaskSwitchContext+0x5c>
    1efc:	80 91 f8 0d 	lds	r24, 0x0DF8
    1f00:	90 91 f9 0d 	lds	r25, 0x0DF9
    1f04:	9c 01       	movw	r18, r24
    1f06:	27 5e       	subi	r18, 0xE7	; 231
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	80 91 f8 0d 	lds	r24, 0x0DF8
    1f0e:	90 91 f9 0d 	lds	r25, 0x0DF9
    1f12:	b9 01       	movw	r22, r18
    1f14:	74 d4       	rcall	.+2280   	; 0x27fe <vApplicationStackOverflowHook>
    1f16:	05 c0       	rjmp	.+10     	; 0x1f22 <vTaskSwitchContext+0x68>
    1f18:	80 91 4a 0e 	lds	r24, 0x0E4A
    1f1c:	81 50       	subi	r24, 0x01	; 1
    1f1e:	80 93 4a 0e 	sts	0x0E4A, r24
    1f22:	80 91 4a 0e 	lds	r24, 0x0E4A
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	c9 01       	movw	r24, r18
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	82 0f       	add	r24, r18
    1f3a:	93 1f       	adc	r25, r19
    1f3c:	86 50       	subi	r24, 0x06	; 6
    1f3e:	92 4f       	sbci	r25, 0xF2	; 242
    1f40:	fc 01       	movw	r30, r24
    1f42:	80 81       	ld	r24, Z
    1f44:	88 23       	and	r24, r24
    1f46:	41 f3       	breq	.-48     	; 0x1f18 <vTaskSwitchContext+0x5e>
    1f48:	80 91 4a 0e 	lds	r24, 0x0E4A
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	c9 01       	movw	r24, r18
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	82 0f       	add	r24, r18
    1f60:	93 1f       	adc	r25, r19
    1f62:	86 50       	subi	r24, 0x06	; 6
    1f64:	92 4f       	sbci	r25, 0xF2	; 242
    1f66:	9a 83       	std	Y+2, r25	; 0x02
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	fc 01       	movw	r30, r24
    1f70:	81 81       	ldd	r24, Z+1	; 0x01
    1f72:	92 81       	ldd	r25, Z+2	; 0x02
    1f74:	fc 01       	movw	r30, r24
    1f76:	22 81       	ldd	r18, Z+2	; 0x02
    1f78:	33 81       	ldd	r19, Z+3	; 0x03
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7e:	fc 01       	movw	r30, r24
    1f80:	32 83       	std	Z+2, r19	; 0x02
    1f82:	21 83       	std	Z+1, r18	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	fc 01       	movw	r30, r24
    1f8a:	21 81       	ldd	r18, Z+1	; 0x01
    1f8c:	32 81       	ldd	r19, Z+2	; 0x02
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	03 96       	adiw	r24, 0x03	; 3
    1f94:	28 17       	cp	r18, r24
    1f96:	39 07       	cpc	r19, r25
    1f98:	69 f4       	brne	.+26     	; 0x1fb4 <vTaskSwitchContext+0xfa>
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	81 81       	ldd	r24, Z+1	; 0x01
    1fa2:	92 81       	ldd	r25, Z+2	; 0x02
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	22 81       	ldd	r18, Z+2	; 0x02
    1fa8:	33 81       	ldd	r19, Z+3	; 0x03
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	fc 01       	movw	r30, r24
    1fb0:	32 83       	std	Z+2, r19	; 0x02
    1fb2:	21 83       	std	Z+1, r18	; 0x01
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	fc 01       	movw	r30, r24
    1fba:	81 81       	ldd	r24, Z+1	; 0x01
    1fbc:	92 81       	ldd	r25, Z+2	; 0x02
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	86 81       	ldd	r24, Z+6	; 0x06
    1fc2:	97 81       	ldd	r25, Z+7	; 0x07
    1fc4:	90 93 f9 0d 	sts	0x0DF9, r25
    1fc8:	80 93 f8 0d 	sts	0x0DF8, r24
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <vTaskPlaceOnEventList>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <vTaskPlaceOnEventList+0x6>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <vTaskPlaceOnEventList+0x8>
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	7e 83       	std	Y+6, r23	; 0x06
    1fe8:	6d 83       	std	Y+5, r22	; 0x05
    1fea:	80 91 f8 0d 	lds	r24, 0x0DF8
    1fee:	90 91 f9 0d 	lds	r25, 0x0DF9
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	24 5f       	subi	r18, 0xF4	; 244
    1ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	b9 01       	movw	r22, r18
    1ffe:	0e 94 3c 01 	call	0x278	; 0x278 <vListInsert>
    2002:	80 91 f8 0d 	lds	r24, 0x0DF8
    2006:	90 91 f9 0d 	lds	r25, 0x0DF9
    200a:	02 96       	adiw	r24, 0x02	; 2
    200c:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    2010:	20 91 48 0e 	lds	r18, 0x0E48
    2014:	30 91 49 0e 	lds	r19, 0x0E49
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	82 0f       	add	r24, r18
    201e:	93 1f       	adc	r25, r19
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	00 d2       	rcall	.+1024   	; 0x242a <prvAddCurrentTaskToDelayedList>
    202a:	26 96       	adiw	r28, 0x06	; 6
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	08 95       	ret

0000203c <xTaskRemoveFromEventList>:
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	00 d0       	rcall	.+0      	; 0x2042 <xTaskRemoveFromEventList+0x6>
    2042:	1f 92       	push	r1
    2044:	1f 92       	push	r1
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	9d 83       	std	Y+5, r25	; 0x05
    204c:	8c 83       	std	Y+4, r24	; 0x04
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	fc 01       	movw	r30, r24
    2054:	85 81       	ldd	r24, Z+5	; 0x05
    2056:	96 81       	ldd	r25, Z+6	; 0x06
    2058:	fc 01       	movw	r30, r24
    205a:	86 81       	ldd	r24, Z+6	; 0x06
    205c:	97 81       	ldd	r25, Z+7	; 0x07
    205e:	9b 83       	std	Y+3, r25	; 0x03
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	0c 96       	adiw	r24, 0x0c	; 12
    2068:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    206c:	80 91 50 0e 	lds	r24, 0x0E50
    2070:	88 23       	and	r24, r24
    2072:	69 f5       	brne	.+90     	; 0x20ce <xTaskRemoveFromEventList+0x92>
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	9b 81       	ldd	r25, Y+3	; 0x03
    2078:	02 96       	adiw	r24, 0x02	; 2
    207a:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	fc 01       	movw	r30, r24
    2084:	96 89       	ldd	r25, Z+22	; 0x16
    2086:	80 91 4a 0e 	lds	r24, 0x0E4A
    208a:	89 17       	cp	r24, r25
    208c:	30 f4       	brcc	.+12     	; 0x209a <xTaskRemoveFromEventList+0x5e>
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	9b 81       	ldd	r25, Y+3	; 0x03
    2092:	fc 01       	movw	r30, r24
    2094:	86 89       	ldd	r24, Z+22	; 0x16
    2096:	80 93 4a 0e 	sts	0x0E4A, r24
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	9b 81       	ldd	r25, Y+3	; 0x03
    209e:	ac 01       	movw	r20, r24
    20a0:	4e 5f       	subi	r20, 0xFE	; 254
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	fc 01       	movw	r30, r24
    20aa:	86 89       	ldd	r24, Z+22	; 0x16
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	c9 01       	movw	r24, r18
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	86 50       	subi	r24, 0x06	; 6
    20c4:	92 4f       	sbci	r25, 0xF2	; 242
    20c6:	ba 01       	movw	r22, r20
    20c8:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
    20cc:	08 c0       	rjmp	.+16     	; 0x20de <xTaskRemoveFromEventList+0xa2>
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	9b 81       	ldd	r25, Y+3	; 0x03
    20d2:	0c 96       	adiw	r24, 0x0c	; 12
    20d4:	bc 01       	movw	r22, r24
    20d6:	84 e3       	ldi	r24, 0x34	; 52
    20d8:	9e e0       	ldi	r25, 0x0E	; 14
    20da:	0e 94 ef 00 	call	0x1de	; 0x1de <vListInsertEnd>
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	9b 81       	ldd	r25, Y+3	; 0x03
    20e2:	fc 01       	movw	r30, r24
    20e4:	26 89       	ldd	r18, Z+22	; 0x16
    20e6:	80 91 f8 0d 	lds	r24, 0x0DF8
    20ea:	90 91 f9 0d 	lds	r25, 0x0DF9
    20ee:	fc 01       	movw	r30, r24
    20f0:	86 89       	ldd	r24, Z+22	; 0x16
    20f2:	82 17       	cp	r24, r18
    20f4:	30 f4       	brcc	.+12     	; 0x2102 <xTaskRemoveFromEventList+0xc6>
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	80 93 4d 0e 	sts	0x0E4D, r24
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <xTaskRemoveFromEventList+0xc8>
    2102:	19 82       	std	Y+1, r1	; 0x01
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	08 95       	ret

00002116 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	1f 92       	push	r1
    211c:	1f 92       	push	r1
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2126:	20 91 4e 0e 	lds	r18, 0x0E4E
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	fc 01       	movw	r30, r24
    2130:	20 83       	st	Z, r18
	pxTimeOut->xTimeOnEntering = xTickCount;
    2132:	20 91 48 0e 	lds	r18, 0x0E48
    2136:	30 91 49 0e 	lds	r19, 0x0E49
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	9a 81       	ldd	r25, Y+2	; 0x02
    213e:	fc 01       	movw	r30, r24
    2140:	32 83       	std	Z+2, r19	; 0x02
    2142:	21 83       	std	Z+1, r18	; 0x01
}
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	27 97       	sbiw	r28, 0x07	; 7
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	9d 83       	std	Y+5, r25	; 0x05
    2164:	8c 83       	std	Y+4, r24	; 0x04
    2166:	7f 83       	std	Y+7, r23	; 0x07
    2168:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    2170:	80 91 48 0e 	lds	r24, 0x0E48
    2174:	90 91 49 0e 	lds	r25, 0x0E49
    2178:	9b 83       	std	Y+3, r25	; 0x03
    217a:	8a 83       	std	Y+2, r24	; 0x02
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	fc 01       	movw	r30, r24
    2182:	90 81       	ld	r25, Z
    2184:	80 91 4e 0e 	lds	r24, 0x0E4E
    2188:	98 17       	cp	r25, r24
    218a:	69 f0       	breq	.+26     	; 0x21a6 <xTaskCheckForTimeOut+0x58>
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
    218e:	9d 81       	ldd	r25, Y+5	; 0x05
    2190:	fc 01       	movw	r30, r24
    2192:	21 81       	ldd	r18, Z+1	; 0x01
    2194:	32 81       	ldd	r19, Z+2	; 0x02
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	9b 81       	ldd	r25, Y+3	; 0x03
    219a:	82 17       	cp	r24, r18
    219c:	93 07       	cpc	r25, r19
    219e:	18 f0       	brcs	.+6      	; 0x21a6 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	2f c0       	rjmp	.+94     	; 0x2204 <__stack+0x5>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	9d 81       	ldd	r25, Y+5	; 0x05
    21aa:	fc 01       	movw	r30, r24
    21ac:	81 81       	ldd	r24, Z+1	; 0x01
    21ae:	92 81       	ldd	r25, Z+2	; 0x02
    21b0:	2a 81       	ldd	r18, Y+2	; 0x02
    21b2:	3b 81       	ldd	r19, Y+3	; 0x03
    21b4:	28 1b       	sub	r18, r24
    21b6:	39 0b       	sbc	r19, r25
    21b8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ba:	9f 81       	ldd	r25, Y+7	; 0x07
    21bc:	fc 01       	movw	r30, r24
    21be:	80 81       	ld	r24, Z
    21c0:	91 81       	ldd	r25, Z+1	; 0x01
    21c2:	28 17       	cp	r18, r24
    21c4:	39 07       	cpc	r19, r25
    21c6:	e0 f4       	brcc	.+56     	; 0x2200 <__stack+0x1>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
    21c8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ca:	9f 81       	ldd	r25, Y+7	; 0x07
    21cc:	fc 01       	movw	r30, r24
    21ce:	20 81       	ld	r18, Z
    21d0:	31 81       	ldd	r19, Z+1	; 0x01
    21d2:	8c 81       	ldd	r24, Y+4	; 0x04
    21d4:	9d 81       	ldd	r25, Y+5	; 0x05
    21d6:	fc 01       	movw	r30, r24
    21d8:	41 81       	ldd	r20, Z+1	; 0x01
    21da:	52 81       	ldd	r21, Z+2	; 0x02
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	ba 01       	movw	r22, r20
    21e2:	68 1b       	sub	r22, r24
    21e4:	79 0b       	sbc	r23, r25
    21e6:	cb 01       	movw	r24, r22
    21e8:	28 0f       	add	r18, r24
    21ea:	39 1f       	adc	r19, r25
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	9f 81       	ldd	r25, Y+7	; 0x07
    21f0:	fc 01       	movw	r30, r24
    21f2:	31 83       	std	Z+1, r19	; 0x01
    21f4:	20 83       	st	Z, r18
			vTaskSetTimeOutState( pxTimeOut );
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	8d df       	rcall	.-230    	; 0x2116 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	02 c0       	rjmp	.+4      	; 0x2204 <__stack+0x5>
		}
		else
		{
			xReturn = pdTRUE;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2208:	89 81       	ldd	r24, Y+1	; 0x01
}
    220a:	27 96       	adiw	r28, 0x07	; 7
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	80 93 4d 0e 	sts	0x0E4D, r24
}
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	08 95       	ret

00002230 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	2a 97       	sbiw	r28, 0x0a	; 10
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
    2248:	9b 83       	std	Y+3, r25	; 0x03
    224a:	8a 83       	std	Y+2, r24	; 0x02
    224c:	7d 83       	std	Y+5, r23	; 0x05
    224e:	6c 83       	std	Y+4, r22	; 0x04
    2250:	4e 83       	std	Y+6, r20	; 0x06
    2252:	38 87       	std	Y+8, r19	; 0x08
    2254:	2f 83       	std	Y+7, r18	; 0x07
    2256:	1a 87       	std	Y+10, r17	; 0x0a
    2258:	09 87       	std	Y+9, r16	; 0x09
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    225a:	19 82       	std	Y+1, r1	; 0x01
    225c:	22 c0       	rjmp	.+68     	; 0x22a2 <prvInitialiseTCBVariables+0x72>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	29 81       	ldd	r18, Y+1	; 0x01
    2266:	22 2f       	mov	r18, r18
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4c 81       	ldd	r20, Y+4	; 0x04
    226c:	5d 81       	ldd	r21, Y+5	; 0x05
    226e:	24 0f       	add	r18, r20
    2270:	35 1f       	adc	r19, r21
    2272:	f9 01       	movw	r30, r18
    2274:	40 81       	ld	r20, Z
    2276:	2a 81       	ldd	r18, Y+2	; 0x02
    2278:	3b 81       	ldd	r19, Y+3	; 0x03
    227a:	82 0f       	add	r24, r18
    227c:	93 1f       	adc	r25, r19
    227e:	49 96       	adiw	r24, 0x19	; 25
    2280:	fc 01       	movw	r30, r24
    2282:	40 83       	st	Z, r20

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	2c 81       	ldd	r18, Y+4	; 0x04
    228c:	3d 81       	ldd	r19, Y+5	; 0x05
    228e:	82 0f       	add	r24, r18
    2290:	93 1f       	adc	r25, r19
    2292:	fc 01       	movw	r30, r24
    2294:	80 81       	ld	r24, Z
    2296:	88 23       	and	r24, r24
    2298:	09 f4       	brne	.+2      	; 0x229c <prvInitialiseTCBVariables+0x6c>
		{
			break;
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <prvInitialiseTCBVariables+0x78>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	88 30       	cpi	r24, 0x08	; 8
    22a6:	d8 f2       	brcs	.-74     	; 0x225e <prvInitialiseTCBVariables+0x2e>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	9b 81       	ldd	r25, Y+3	; 0x03
    22ac:	fc 01       	movw	r30, r24
    22ae:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    22b0:	8e 81       	ldd	r24, Y+6	; 0x06
    22b2:	84 30       	cpi	r24, 0x04	; 4
    22b4:	10 f0       	brcs	.+4      	; 0x22ba <prvInitialiseTCBVariables+0x8a>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	8e 83       	std	Y+6, r24	; 0x06
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	9b 81       	ldd	r25, Y+3	; 0x03
    22be:	2e 81       	ldd	r18, Y+6	; 0x06
    22c0:	fc 01       	movw	r30, r24
    22c2:	26 8b       	std	Z+22, r18	; 0x16
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	9b 81       	ldd	r25, Y+3	; 0x03
    22c8:	02 96       	adiw	r24, 0x02	; 2
    22ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	9b 81       	ldd	r25, Y+3	; 0x03
    22d2:	0c 96       	adiw	r24, 0x0c	; 12
    22d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	2a 81       	ldd	r18, Y+2	; 0x02
    22de:	3b 81       	ldd	r19, Y+3	; 0x03
    22e0:	fc 01       	movw	r30, r24
    22e2:	31 87       	std	Z+9, r19	; 0x09
    22e4:	20 87       	std	Z+8, r18	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22e6:	8e 81       	ldd	r24, Y+6	; 0x06
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	24 e0       	ldi	r18, 0x04	; 4
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	28 1b       	sub	r18, r24
    22f2:	39 0b       	sbc	r19, r25
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	fc 01       	movw	r30, r24
    22fa:	35 87       	std	Z+13, r19	; 0x0d
    22fc:	24 87       	std	Z+12, r18	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	9b 81       	ldd	r25, Y+3	; 0x03
    2302:	2a 81       	ldd	r18, Y+2	; 0x02
    2304:	3b 81       	ldd	r19, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	33 8b       	std	Z+19, r19	; 0x13
    230a:	22 8b       	std	Z+18, r18	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	9b 81       	ldd	r25, Y+3	; 0x03
    2310:	fc 01       	movw	r30, r24
    2312:	11 a2       	std	Z+33, r1	; 0x21
    2314:	12 a2       	std	Z+34, r1	; 0x22
    2316:	13 a2       	std	Z+35, r1	; 0x23
    2318:	14 a2       	std	Z+36, r1	; 0x24
		pxTCB->eNotifyState = eNotWaitingNotification;
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	fc 01       	movw	r30, r24
    2320:	15 a2       	std	Z+37, r1	; 0x25
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
    2322:	2a 96       	adiw	r28, 0x0a	; 10
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
    232e:	df 91       	pop	r29
    2330:	cf 91       	pop	r28
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	08 95       	ret

00002338 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    2338:	cf 93       	push	r28
    233a:	df 93       	push	r29
    233c:	1f 92       	push	r1
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2342:	19 82       	std	Y+1, r1	; 0x01
    2344:	13 c0       	rjmp	.+38     	; 0x236c <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	c9 01       	movw	r24, r18
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	82 0f       	add	r24, r18
    235c:	93 1f       	adc	r25, r19
    235e:	86 50       	subi	r24, 0x06	; 6
    2360:	92 4f       	sbci	r25, 0xF2	; 242
    2362:	0e 94 a7 00 	call	0x14e	; 0x14e <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	8f 5f       	subi	r24, 0xFF	; 255
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	84 30       	cpi	r24, 0x04	; 4
    2370:	50 f3       	brcs	.-44     	; 0x2346 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    2372:	8e e1       	ldi	r24, 0x1E	; 30
    2374:	9e e0       	ldi	r25, 0x0E	; 14
    2376:	0e 94 a7 00 	call	0x14e	; 0x14e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    237a:	87 e2       	ldi	r24, 0x27	; 39
    237c:	9e e0       	ldi	r25, 0x0E	; 14
    237e:	0e 94 a7 00 	call	0x14e	; 0x14e <vListInitialise>
	vListInitialise( &xPendingReadyList );
    2382:	84 e3       	ldi	r24, 0x34	; 52
    2384:	9e e0       	ldi	r25, 0x0E	; 14
    2386:	0e 94 a7 00 	call	0x14e	; 0x14e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    238a:	8d e3       	ldi	r24, 0x3D	; 61
    238c:	9e e0       	ldi	r25, 0x0E	; 14
    238e:	0e 94 a7 00 	call	0x14e	; 0x14e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    2392:	8e e1       	ldi	r24, 0x1E	; 30
    2394:	9e e0       	ldi	r25, 0x0E	; 14
    2396:	90 93 31 0e 	sts	0x0E31, r25
    239a:	80 93 30 0e 	sts	0x0E30, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    239e:	87 e2       	ldi	r24, 0x27	; 39
    23a0:	9e e0       	ldi	r25, 0x0E	; 14
    23a2:	90 93 33 0e 	sts	0x0E33, r25
    23a6:	80 93 32 0e 	sts	0x0E32, r24
}
    23aa:	0f 90       	pop	r0
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	08 95       	ret

000023b2 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <prvCheckTasksWaitingTermination+0x6>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    23bc:	2c c0       	rjmp	.+88     	; 0x2416 <prvCheckTasksWaitingTermination+0x64>
		{
			vTaskSuspendAll();
    23be:	e0 db       	rcall	.-2112   	; 0x1b80 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    23c0:	90 91 3d 0e 	lds	r25, 0x0E3D
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	99 23       	and	r25, r25
    23c8:	09 f0       	breq	.+2      	; 0x23cc <prvCheckTasksWaitingTermination+0x1a>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	89 83       	std	Y+1, r24	; 0x01
			}
			( void ) xTaskResumeAll();
    23ce:	e4 db       	rcall	.-2104   	; 0x1b98 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	88 23       	and	r24, r24
    23d4:	01 f5       	brne	.+64     	; 0x2416 <prvCheckTasksWaitingTermination+0x64>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    23dc:	80 91 42 0e 	lds	r24, 0x0E42
    23e0:	90 91 43 0e 	lds	r25, 0x0E43
    23e4:	fc 01       	movw	r30, r24
    23e6:	86 81       	ldd	r24, Z+6	; 0x06
    23e8:	97 81       	ldd	r25, Z+7	; 0x07
    23ea:	9b 83       	std	Y+3, r25	; 0x03
    23ec:	8a 83       	std	Y+2, r24	; 0x02
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	9b 81       	ldd	r25, Y+3	; 0x03
    23f2:	02 96       	adiw	r24, 0x02	; 2
    23f4:	0e 94 b3 01 	call	0x366	; 0x366 <uxListRemove>
					--uxCurrentNumberOfTasks;
    23f8:	80 91 47 0e 	lds	r24, 0x0E47
    23fc:	81 50       	subi	r24, 0x01	; 1
    23fe:	80 93 47 0e 	sts	0x0E47, r24
					--uxTasksDeleted;
    2402:	80 91 46 0e 	lds	r24, 0x0E46
    2406:	81 50       	subi	r24, 0x01	; 1
    2408:	80 93 46 0e 	sts	0x0E46, r24
				}
				taskEXIT_CRITICAL();
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	98 d0       	rcall	.+304    	; 0x2546 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    2416:	80 91 46 0e 	lds	r24, 0x0E46
    241a:	88 23       	and	r24, r24
    241c:	81 f6       	brne	.-96     	; 0x23be <prvCheckTasksWaitingTermination+0xc>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	08 95       	ret

0000242a <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	1f 92       	push	r1
    2430:	1f 92       	push	r1
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    243a:	80 91 f8 0d 	lds	r24, 0x0DF8
    243e:	90 91 f9 0d 	lds	r25, 0x0DF9
    2442:	29 81       	ldd	r18, Y+1	; 0x01
    2444:	3a 81       	ldd	r19, Y+2	; 0x02
    2446:	fc 01       	movw	r30, r24
    2448:	33 83       	std	Z+3, r19	; 0x03
    244a:	22 83       	std	Z+2, r18	; 0x02

	if( xTimeToWake < xTickCount )
    244c:	80 91 48 0e 	lds	r24, 0x0E48
    2450:	90 91 49 0e 	lds	r25, 0x0E49
    2454:	29 81       	ldd	r18, Y+1	; 0x01
    2456:	3a 81       	ldd	r19, Y+2	; 0x02
    2458:	28 17       	cp	r18, r24
    245a:	39 07       	cpc	r19, r25
    245c:	78 f4       	brcc	.+30     	; 0x247c <prvAddCurrentTaskToDelayedList+0x52>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    245e:	80 91 f8 0d 	lds	r24, 0x0DF8
    2462:	90 91 f9 0d 	lds	r25, 0x0DF9
    2466:	9c 01       	movw	r18, r24
    2468:	2e 5f       	subi	r18, 0xFE	; 254
    246a:	3f 4f       	sbci	r19, 0xFF	; 255
    246c:	80 91 32 0e 	lds	r24, 0x0E32
    2470:	90 91 33 0e 	lds	r25, 0x0E33
    2474:	b9 01       	movw	r22, r18
    2476:	0e 94 3c 01 	call	0x278	; 0x278 <vListInsert>
    247a:	1d c0       	rjmp	.+58     	; 0x24b6 <prvAddCurrentTaskToDelayedList+0x8c>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
    247c:	80 91 f8 0d 	lds	r24, 0x0DF8
    2480:	90 91 f9 0d 	lds	r25, 0x0DF9
    2484:	9c 01       	movw	r18, r24
    2486:	2e 5f       	subi	r18, 0xFE	; 254
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	80 91 30 0e 	lds	r24, 0x0E30
    248e:	90 91 31 0e 	lds	r25, 0x0E31
    2492:	b9 01       	movw	r22, r18
    2494:	0e 94 3c 01 	call	0x278	; 0x278 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    2498:	80 91 00 02 	lds	r24, 0x0200
    249c:	90 91 01 02 	lds	r25, 0x0201
    24a0:	29 81       	ldd	r18, Y+1	; 0x01
    24a2:	3a 81       	ldd	r19, Y+2	; 0x02
    24a4:	28 17       	cp	r18, r24
    24a6:	39 07       	cpc	r19, r25
    24a8:	30 f4       	brcc	.+12     	; 0x24b6 <prvAddCurrentTaskToDelayedList+0x8c>
		{
			xNextTaskUnblockTime = xTimeToWake;
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	90 93 01 02 	sts	0x0201, r25
    24b2:	80 93 00 02 	sts	0x0200, r24
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	28 97       	sbiw	r28, 0x08	; 8
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	de bf       	out	0x3e, r29	; 62
    24d0:	0f be       	out	0x3f, r0	; 63
    24d2:	cd bf       	out	0x3d, r28	; 61
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	78 87       	std	Y+8, r23	; 0x08
    24da:	6f 83       	std	Y+7, r22	; 0x07
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    24dc:	8f 81       	ldd	r24, Y+7	; 0x07
    24de:	98 85       	ldd	r25, Y+8	; 0x08
    24e0:	89 2b       	or	r24, r25
    24e2:	29 f4       	brne	.+10     	; 0x24ee <prvAllocateTCBAndStack+0x2e>
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <pvPortMalloc>
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <prvAllocateTCBAndStack+0x32>
    24ee:	8f 81       	ldd	r24, Y+7	; 0x07
    24f0:	98 85       	ldd	r25, Y+8	; 0x08
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03

		if( pxStack != NULL )
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	89 2b       	or	r24, r25
    24fc:	b9 f0       	breq	.+46     	; 0x252c <prvAllocateTCBAndStack+0x6c>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
    24fe:	86 e2       	ldi	r24, 0x26	; 38
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <pvPortMalloc>
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01

			if( pxNewTCB != NULL )
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	89 2b       	or	r24, r25
    2510:	41 f0       	breq	.+16     	; 0x2522 <prvAllocateTCBAndStack+0x62>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	9a 81       	ldd	r25, Y+2	; 0x02
    2516:	2b 81       	ldd	r18, Y+3	; 0x03
    2518:	3c 81       	ldd	r19, Y+4	; 0x04
    251a:	fc 01       	movw	r30, r24
    251c:	30 8f       	std	Z+24, r19	; 0x18
    251e:	27 8b       	std	Z+23, r18	; 0x17
    2520:	07 c0       	rjmp	.+14     	; 0x2530 <prvAllocateTCBAndStack+0x70>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	0e 94 4e 07 	call	0xe9c	; 0xe9c <vPortFree>
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <prvAllocateTCBAndStack+0x70>
			}
		}
		else
		{
			pxNewTCB = NULL;
    252c:	1a 82       	std	Y+2, r1	; 0x02
    252e:	19 82       	std	Y+1, r1	; 0x01
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2534:	28 96       	adiw	r28, 0x08	; 8
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29
    254a:	1f 92       	push	r1
    254c:	1f 92       	push	r1
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	fc 01       	movw	r30, r24
    255c:	87 89       	ldd	r24, Z+23	; 0x17
    255e:	90 8d       	ldd	r25, Z+24	; 0x18
    2560:	0e 94 4e 07 	call	0xe9c	; 0xe9c <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	9a 81       	ldd	r25, Y+2	; 0x02
    2568:	0e 94 4e 07 	call	0xe9c	; 0xe9c <vPortFree>
	}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	1f 92       	push	r1
    257c:	1f 92       	push	r1
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2582:	80 91 30 0e 	lds	r24, 0x0E30
    2586:	90 91 31 0e 	lds	r25, 0x0E31
    258a:	fc 01       	movw	r30, r24
    258c:	80 81       	ld	r24, Z
    258e:	88 23       	and	r24, r24
    2590:	39 f4       	brne	.+14     	; 0x25a0 <prvResetNextTaskUnblockTime+0x2a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    2592:	8f ef       	ldi	r24, 0xFF	; 255
    2594:	9f ef       	ldi	r25, 0xFF	; 255
    2596:	90 93 01 02 	sts	0x0201, r25
    259a:	80 93 00 02 	sts	0x0200, r24
    259e:	15 c0       	rjmp	.+42     	; 0x25ca <prvResetNextTaskUnblockTime+0x54>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    25a0:	80 91 30 0e 	lds	r24, 0x0E30
    25a4:	90 91 31 0e 	lds	r25, 0x0E31
    25a8:	fc 01       	movw	r30, r24
    25aa:	85 81       	ldd	r24, Z+5	; 0x05
    25ac:	96 81       	ldd	r25, Z+6	; 0x06
    25ae:	fc 01       	movw	r30, r24
    25b0:	86 81       	ldd	r24, Z+6	; 0x06
    25b2:	97 81       	ldd	r25, Z+7	; 0x07
    25b4:	9a 83       	std	Y+2, r25	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	fc 01       	movw	r30, r24
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	90 93 01 02 	sts	0x0201, r25
    25c6:	80 93 00 02 	sts	0x0200, r24
	}
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	df 91       	pop	r29
    25d0:	cf 91       	pop	r28
    25d2:	08 95       	ret

000025d4 <__vector_9>:
SemaphoreHandle_t xSemaphore;
QueueHandle_t xQueue1;
TaskHandle_t x1Handle;
TaskHandle_t x2Handle;

ISR(PCINT0_vect) {
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	00 90 5f 00 	lds	r0, 0x005F
    25dc:	0f 92       	push	r0
    25de:	11 24       	eor	r1, r1
    25e0:	00 90 5b 00 	lds	r0, 0x005B
    25e4:	0f 92       	push	r0
    25e6:	2f 93       	push	r18
    25e8:	3f 93       	push	r19
    25ea:	4f 93       	push	r20
    25ec:	5f 93       	push	r21
    25ee:	6f 93       	push	r22
    25f0:	7f 93       	push	r23
    25f2:	8f 93       	push	r24
    25f4:	9f 93       	push	r25
    25f6:	af 93       	push	r26
    25f8:	bf 93       	push	r27
    25fa:	ef 93       	push	r30
    25fc:	ff 93       	push	r31
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	static portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken);	
    2606:	80 91 56 0e 	lds	r24, 0x0E56
    260a:	90 91 57 0e 	lds	r25, 0x0E57
    260e:	61 e5       	ldi	r22, 0x51	; 81
    2610:	7e e0       	ldi	r23, 0x0E	; 14
    2612:	0e 94 52 09 	call	0x12a4	; 0x12a4 <xQueueGiveFromISR>

	PORTA ^= 0xff;
    2616:	82 e2       	ldi	r24, 0x22	; 34
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	22 e2       	ldi	r18, 0x22	; 34
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	f9 01       	movw	r30, r18
    2620:	20 81       	ld	r18, Z
    2622:	20 95       	com	r18
    2624:	fc 01       	movw	r30, r24
    2626:	20 83       	st	Z, r18

	if(xHigherPriorityTaskWoken == pdTRUE)
    2628:	80 91 51 0e 	lds	r24, 0x0E51
    262c:	81 30       	cpi	r24, 0x01	; 1
    262e:	11 f4       	brne	.+4      	; 0x2634 <__vector_9+0x60>
		taskYIELD();
    2630:	0e 94 84 05 	call	0xb08	; 0xb08 <vPortYield>
}
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	ff 91       	pop	r31
    263a:	ef 91       	pop	r30
    263c:	bf 91       	pop	r27
    263e:	af 91       	pop	r26
    2640:	9f 91       	pop	r25
    2642:	8f 91       	pop	r24
    2644:	7f 91       	pop	r23
    2646:	6f 91       	pop	r22
    2648:	5f 91       	pop	r21
    264a:	4f 91       	pop	r20
    264c:	3f 91       	pop	r19
    264e:	2f 91       	pop	r18
    2650:	0f 90       	pop	r0
    2652:	00 92 5b 00 	sts	0x005B, r0
    2656:	0f 90       	pop	r0
    2658:	00 92 5f 00 	sts	0x005F, r0
    265c:	0f 90       	pop	r0
    265e:	1f 90       	pop	r1
    2660:	18 95       	reti

00002662 <vHandler>:

void vHandler(void *pvParameters) {
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	1f 92       	push	r1
    2668:	1f 92       	push	r1
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62
    266e:	9a 83       	std	Y+2, r25	; 0x02
    2670:	89 83       	std	Y+1, r24	; 0x01
	while (1) {
		xSemaphoreTake(xSemaphore, portMAX_DELAY);
    2672:	80 91 56 0e 	lds	r24, 0x0E56
    2676:	90 91 57 0e 	lds	r25, 0x0E57
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	4f ef       	ldi	r20, 0xFF	; 255
    267e:	5f ef       	ldi	r21, 0xFF	; 255
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	70 e0       	ldi	r23, 0x00	; 0
    2684:	0e 94 ad 09 	call	0x135a	; 0x135a <xQueueGenericReceive>

		PORTA ^= 0xff;
    2688:	82 e2       	ldi	r24, 0x22	; 34
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	22 e2       	ldi	r18, 0x22	; 34
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	f9 01       	movw	r30, r18
    2692:	20 81       	ld	r18, Z
    2694:	20 95       	com	r18
    2696:	fc 01       	movw	r30, r24
    2698:	20 83       	st	Z, r18
		vTaskDelay(1000);
    269a:	88 ee       	ldi	r24, 0xE8	; 232
    269c:	93 e0       	ldi	r25, 0x03	; 3
    269e:	0a da       	rcall	.-3052   	; 0x1ab4 <vTaskDelay>
	}
    26a0:	e8 cf       	rjmp	.-48     	; 0x2672 <vHandler+0x10>

000026a2 <main>:
}

int main( void )
{
    26a2:	af 92       	push	r10
    26a4:	bf 92       	push	r11
    26a6:	cf 92       	push	r12
    26a8:	df 92       	push	r13
    26aa:	ef 92       	push	r14
    26ac:	ff 92       	push	r15
    26ae:	0f 93       	push	r16
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
	vSemaphoreCreateBinary(xSemaphore);
    26b8:	43 e0       	ldi	r20, 0x03	; 3
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <xQueueGenericCreate>
    26c2:	90 93 57 0e 	sts	0x0E57, r25
    26c6:	80 93 56 0e 	sts	0x0E56, r24
    26ca:	80 91 56 0e 	lds	r24, 0x0E56
    26ce:	90 91 57 0e 	lds	r25, 0x0E57
    26d2:	89 2b       	or	r24, r25
    26d4:	59 f0       	breq	.+22     	; 0x26ec <main+0x4a>
    26d6:	80 91 56 0e 	lds	r24, 0x0E56
    26da:	90 91 57 0e 	lds	r25, 0x0E57
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	60 e0       	ldi	r22, 0x00	; 0
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <xQueueGenericSend>
	//xSemaphore = xSemaphoreCreateCounting(10, 0);

	if(xSemaphore != NULL)
    26ec:	80 91 56 0e 	lds	r24, 0x0E56
    26f0:	90 91 57 0e 	lds	r25, 0x0E57
    26f4:	89 2b       	or	r24, r25
    26f6:	09 f4       	brne	.+2      	; 0x26fa <main+0x58>
    26f8:	40 c0       	rjmp	.+128    	; 0x277a <main+0xd8>
	{
		DDRA = 0xff;
    26fa:	81 e2       	ldi	r24, 0x21	; 33
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	2f ef       	ldi	r18, 0xFF	; 255
    2700:	fc 01       	movw	r30, r24
    2702:	20 83       	st	Z, r18
		PORTA = 0xff;
    2704:	82 e2       	ldi	r24, 0x22	; 34
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	2f ef       	ldi	r18, 0xFF	; 255
    270a:	fc 01       	movw	r30, r24
    270c:	20 83       	st	Z, r18

		DDRB &= ~(1 << DDB0);
    270e:	84 e2       	ldi	r24, 0x24	; 36
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	24 e2       	ldi	r18, 0x24	; 36
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	f9 01       	movw	r30, r18
    2718:	20 81       	ld	r18, Z
    271a:	2e 7f       	andi	r18, 0xFE	; 254
    271c:	fc 01       	movw	r30, r24
    271e:	20 83       	st	Z, r18
		PORTB |= (1 << PINB0);
    2720:	85 e2       	ldi	r24, 0x25	; 37
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	25 e2       	ldi	r18, 0x25	; 37
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	f9 01       	movw	r30, r18
    272a:	20 81       	ld	r18, Z
    272c:	21 60       	ori	r18, 0x01	; 1
    272e:	fc 01       	movw	r30, r24
    2730:	20 83       	st	Z, r18

		PCICR |= _BV(PCIE0);
    2732:	88 e6       	ldi	r24, 0x68	; 104
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	28 e6       	ldi	r18, 0x68	; 104
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	f9 01       	movw	r30, r18
    273c:	20 81       	ld	r18, Z
    273e:	21 60       	ori	r18, 0x01	; 1
    2740:	fc 01       	movw	r30, r24
    2742:	20 83       	st	Z, r18
		PCMSK0 |= _BV(PCINT0);
    2744:	8b e6       	ldi	r24, 0x6B	; 107
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	2b e6       	ldi	r18, 0x6B	; 107
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	f9 01       	movw	r30, r18
    274e:	20 81       	ld	r18, Z
    2750:	21 60       	ori	r18, 0x01	; 1
    2752:	fc 01       	movw	r30, r24
    2754:	20 83       	st	Z, r18

		sei();
    2756:	78 94       	sei

		xTaskCreate(vHandler, "Handler", 1000, NULL, 2, NULL);
    2758:	a1 2c       	mov	r10, r1
    275a:	b1 2c       	mov	r11, r1
    275c:	c1 2c       	mov	r12, r1
    275e:	d1 2c       	mov	r13, r1
    2760:	e1 2c       	mov	r14, r1
    2762:	f1 2c       	mov	r15, r1
    2764:	02 e0       	ldi	r16, 0x02	; 2
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	48 ee       	ldi	r20, 0xE8	; 232
    276c:	53 e0       	ldi	r21, 0x03	; 3
    276e:	67 e0       	ldi	r22, 0x07	; 7
    2770:	72 e0       	ldi	r23, 0x02	; 2
    2772:	81 e3       	ldi	r24, 0x31	; 49
    2774:	93 e1       	ldi	r25, 0x13	; 19
    2776:	bc d8       	rcall	.-3720   	; 0x18f0 <xTaskGenericCreate>
	
		vTaskStartScheduler();
    2778:	ce d9       	rcall	.-3172   	; 0x1b16 <vTaskStartScheduler>
	}

	return 0;
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
}
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	0f 91       	pop	r16
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	bf 90       	pop	r11
    278e:	af 90       	pop	r10
    2790:	08 95       	ret

00002792 <vApplicationIdleHook>:

void vApplicationIdleHook( void )
{
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
	vCoRoutineSchedule();
    279a:	0e 94 06 03 	call	0x60c	; 0x60c <vCoRoutineSchedule>
}
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	08 95       	ret

000027a4 <__vector_default>:

ISR(BADISR_vect)
{
    27a4:	1f 92       	push	r1
    27a6:	0f 92       	push	r0
    27a8:	00 90 5f 00 	lds	r0, 0x005F
    27ac:	0f 92       	push	r0
    27ae:	11 24       	eor	r1, r1
    27b0:	00 90 5b 00 	lds	r0, 0x005B
    27b4:	0f 92       	push	r0
    27b6:	2f 93       	push	r18
    27b8:	3f 93       	push	r19
    27ba:	8f 93       	push	r24
    27bc:	9f 93       	push	r25
    27be:	ef 93       	push	r30
    27c0:	ff 93       	push	r31
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
	PORTA &= ~_BV(PA1);
    27ca:	82 e2       	ldi	r24, 0x22	; 34
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	22 e2       	ldi	r18, 0x22	; 34
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	f9 01       	movw	r30, r18
    27d4:	20 81       	ld	r18, Z
    27d6:	2d 7f       	andi	r18, 0xFD	; 253
    27d8:	fc 01       	movw	r30, r24
    27da:	20 83       	st	Z, r18
}
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	ff 91       	pop	r31
    27e2:	ef 91       	pop	r30
    27e4:	9f 91       	pop	r25
    27e6:	8f 91       	pop	r24
    27e8:	3f 91       	pop	r19
    27ea:	2f 91       	pop	r18
    27ec:	0f 90       	pop	r0
    27ee:	00 92 5b 00 	sts	0x005B, r0
    27f2:	0f 90       	pop	r0
    27f4:	00 92 5f 00 	sts	0x005F, r0
    27f8:	0f 90       	pop	r0
    27fa:	1f 90       	pop	r1
    27fc:	18 95       	reti

000027fe <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName ) {
    27fe:	cf 93       	push	r28
    2800:	df 93       	push	r29
    2802:	00 d0       	rcall	.+0      	; 0x2804 <vApplicationStackOverflowHook+0x6>
    2804:	1f 92       	push	r1
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	9a 83       	std	Y+2, r25	; 0x02
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	7c 83       	std	Y+4, r23	; 0x04
    2810:	6b 83       	std	Y+3, r22	; 0x03
	PORTA |= _BV(PA7);
    2812:	82 e2       	ldi	r24, 0x22	; 34
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	22 e2       	ldi	r18, 0x22	; 34
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	f9 01       	movw	r30, r18
    281c:	20 81       	ld	r18, Z
    281e:	20 68       	ori	r18, 0x80	; 128
    2820:	fc 01       	movw	r30, r24
    2822:	20 83       	st	Z, r18
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	08 95       	ret

00002832 <__vector_25>:
}
/*-----------------------------------------------------------*/

//SIGNAL( SIG_UART_RECV )
ISR(USART0_RX_vect)
{
    2832:	1f 92       	push	r1
    2834:	0f 92       	push	r0
    2836:	00 90 5f 00 	lds	r0, 0x005F
    283a:	0f 92       	push	r0
    283c:	11 24       	eor	r1, r1
    283e:	00 90 5b 00 	lds	r0, 0x005B
    2842:	0f 92       	push	r0
    2844:	2f 93       	push	r18
    2846:	3f 93       	push	r19
    2848:	4f 93       	push	r20
    284a:	5f 93       	push	r21
    284c:	6f 93       	push	r22
    284e:	7f 93       	push	r23
    2850:	8f 93       	push	r24
    2852:	9f 93       	push	r25
    2854:	af 93       	push	r26
    2856:	bf 93       	push	r27
    2858:	ef 93       	push	r30
    285a:	ff 93       	push	r31
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	1f 92       	push	r1
    2862:	1f 92       	push	r1
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
signed char cChar;
signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
    2868:	1a 82       	std	Y+2, r1	; 0x02

	/* Get the character and post it on the queue of Rxed characters.
	If the post causes a task to wake force a context switch as the woken task
	may have a higher priority than the task we have interrupted. */
	cChar = UDR0;
    286a:	86 ec       	ldi	r24, 0xC6	; 198
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	fc 01       	movw	r30, r24
    2870:	80 81       	ld	r24, Z
    2872:	89 83       	std	Y+1, r24	; 0x01

	xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
    2874:	80 91 52 0e 	lds	r24, 0x0E52
    2878:	90 91 53 0e 	lds	r25, 0x0E53
    287c:	ae 01       	movw	r20, r28
    287e:	4e 5f       	subi	r20, 0xFE	; 254
    2880:	5f 4f       	sbci	r21, 0xFF	; 255
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	be 01       	movw	r22, r28
    2886:	6f 5f       	subi	r22, 0xFF	; 255
    2888:	7f 4f       	sbci	r23, 0xFF	; 255
    288a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <xQueueGenericSendFromISR>

	if( xHigherPriorityTaskWoken != pdFALSE )
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	88 23       	and	r24, r24
    2892:	11 f0       	breq	.+4      	; 0x2898 <__vector_25+0x66>
	{
		taskYIELD();
    2894:	0e 94 84 05 	call	0xb08	; 0xb08 <vPortYield>
	}
}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	ff 91       	pop	r31
    28a2:	ef 91       	pop	r30
    28a4:	bf 91       	pop	r27
    28a6:	af 91       	pop	r26
    28a8:	9f 91       	pop	r25
    28aa:	8f 91       	pop	r24
    28ac:	7f 91       	pop	r23
    28ae:	6f 91       	pop	r22
    28b0:	5f 91       	pop	r21
    28b2:	4f 91       	pop	r20
    28b4:	3f 91       	pop	r19
    28b6:	2f 91       	pop	r18
    28b8:	0f 90       	pop	r0
    28ba:	00 92 5b 00 	sts	0x005B, r0
    28be:	0f 90       	pop	r0
    28c0:	00 92 5f 00 	sts	0x005F, r0
    28c4:	0f 90       	pop	r0
    28c6:	1f 90       	pop	r1
    28c8:	18 95       	reti

000028ca <__vector_26>:
/*-----------------------------------------------------------*/

//SIGNAL( SIG_UART_DATA )
ISR(USART0_UDRE_vect)
{
    28ca:	1f 92       	push	r1
    28cc:	0f 92       	push	r0
    28ce:	00 90 5f 00 	lds	r0, 0x005F
    28d2:	0f 92       	push	r0
    28d4:	11 24       	eor	r1, r1
    28d6:	00 90 5b 00 	lds	r0, 0x005B
    28da:	0f 92       	push	r0
    28dc:	2f 93       	push	r18
    28de:	3f 93       	push	r19
    28e0:	4f 93       	push	r20
    28e2:	5f 93       	push	r21
    28e4:	6f 93       	push	r22
    28e6:	7f 93       	push	r23
    28e8:	8f 93       	push	r24
    28ea:	9f 93       	push	r25
    28ec:	af 93       	push	r26
    28ee:	bf 93       	push	r27
    28f0:	ef 93       	push	r30
    28f2:	ff 93       	push	r31
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <__vector_26+0x30>
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
signed char cChar, cTaskWoken;

	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &cTaskWoken ) == pdTRUE )
    28fe:	80 91 54 0e 	lds	r24, 0x0E54
    2902:	90 91 55 0e 	lds	r25, 0x0E55
    2906:	ae 01       	movw	r20, r28
    2908:	4d 5f       	subi	r20, 0xFD	; 253
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	9e 01       	movw	r18, r28
    290e:	2e 5f       	subi	r18, 0xFE	; 254
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	b9 01       	movw	r22, r18
    2914:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <xQueueReceiveFromISR>
    2918:	81 30       	cpi	r24, 0x01	; 1
    291a:	31 f4       	brne	.+12     	; 0x2928 <__vector_26+0x5e>
	{
		/* Send the next character queued for Tx. */
		UDR0 = cChar;
    291c:	86 ec       	ldi	r24, 0xC6	; 198
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	2a 81       	ldd	r18, Y+2	; 0x02
    2922:	fc 01       	movw	r30, r24
    2924:	20 83       	st	Z, r18
    2926:	0d c0       	rjmp	.+26     	; 0x2942 <__vector_26+0x78>
	}
	else
	{
		/* Queue empty, nothing to send. */
		vInterruptOff();
    2928:	81 ec       	ldi	r24, 0xC1	; 193
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	fc 01       	movw	r30, r24
    292e:	80 81       	ld	r24, Z
    2930:	89 83       	std	Y+1, r24	; 0x01
    2932:	89 81       	ldd	r24, Y+1	; 0x01
    2934:	8f 7d       	andi	r24, 0xDF	; 223
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	81 ec       	ldi	r24, 0xC1	; 193
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	29 81       	ldd	r18, Y+1	; 0x01
    293e:	fc 01       	movw	r30, r24
    2940:	20 83       	st	Z, r18
	}
}
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	df 91       	pop	r29
    294a:	cf 91       	pop	r28
    294c:	ff 91       	pop	r31
    294e:	ef 91       	pop	r30
    2950:	bf 91       	pop	r27
    2952:	af 91       	pop	r26
    2954:	9f 91       	pop	r25
    2956:	8f 91       	pop	r24
    2958:	7f 91       	pop	r23
    295a:	6f 91       	pop	r22
    295c:	5f 91       	pop	r21
    295e:	4f 91       	pop	r20
    2960:	3f 91       	pop	r19
    2962:	2f 91       	pop	r18
    2964:	0f 90       	pop	r0
    2966:	00 92 5b 00 	sts	0x005B, r0
    296a:	0f 90       	pop	r0
    296c:	00 92 5f 00 	sts	0x005F, r0
    2970:	0f 90       	pop	r0
    2972:	1f 90       	pop	r1
    2974:	18 95       	reti

00002976 <__udivmodsi4>:
    2976:	a1 e2       	ldi	r26, 0x21	; 33
    2978:	1a 2e       	mov	r1, r26
    297a:	aa 1b       	sub	r26, r26
    297c:	bb 1b       	sub	r27, r27
    297e:	fd 01       	movw	r30, r26
    2980:	0d c0       	rjmp	.+26     	; 0x299c <__udivmodsi4_ep>

00002982 <__udivmodsi4_loop>:
    2982:	aa 1f       	adc	r26, r26
    2984:	bb 1f       	adc	r27, r27
    2986:	ee 1f       	adc	r30, r30
    2988:	ff 1f       	adc	r31, r31
    298a:	a2 17       	cp	r26, r18
    298c:	b3 07       	cpc	r27, r19
    298e:	e4 07       	cpc	r30, r20
    2990:	f5 07       	cpc	r31, r21
    2992:	20 f0       	brcs	.+8      	; 0x299c <__udivmodsi4_ep>
    2994:	a2 1b       	sub	r26, r18
    2996:	b3 0b       	sbc	r27, r19
    2998:	e4 0b       	sbc	r30, r20
    299a:	f5 0b       	sbc	r31, r21

0000299c <__udivmodsi4_ep>:
    299c:	66 1f       	adc	r22, r22
    299e:	77 1f       	adc	r23, r23
    29a0:	88 1f       	adc	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	1a 94       	dec	r1
    29a6:	69 f7       	brne	.-38     	; 0x2982 <__udivmodsi4_loop>
    29a8:	60 95       	com	r22
    29aa:	70 95       	com	r23
    29ac:	80 95       	com	r24
    29ae:	90 95       	com	r25
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	bd 01       	movw	r22, r26
    29b6:	cf 01       	movw	r24, r30
    29b8:	08 95       	ret

000029ba <memcpy>:
    29ba:	fb 01       	movw	r30, r22
    29bc:	dc 01       	movw	r26, r24
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <memcpy+0xa>
    29c0:	01 90       	ld	r0, Z+
    29c2:	0d 92       	st	X+, r0
    29c4:	41 50       	subi	r20, 0x01	; 1
    29c6:	50 40       	sbci	r21, 0x00	; 0
    29c8:	d8 f7       	brcc	.-10     	; 0x29c0 <memcpy+0x6>
    29ca:	08 95       	ret

000029cc <_exit>:
    29cc:	f8 94       	cli

000029ce <__stop_program>:
    29ce:	ff cf       	rjmp	.-2      	; 0x29ce <__stop_program>
